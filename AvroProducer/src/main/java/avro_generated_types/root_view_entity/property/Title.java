/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_generated_types.root_view_entity.property;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Title extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6545054800490642780L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Title\",\"namespace\":\"avro_generated_types.root_view_entity.property\",\"fields\":[{\"name\":\"nl\",\"type\":[\"null\",\"string\"]},{\"name\":\"fr\",\"type\":[\"null\",\"string\"]},{\"name\":\"de\",\"type\":[\"null\",\"string\"]},{\"name\":\"en\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Title> ENCODER =
      new BinaryMessageEncoder<Title>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Title> DECODER =
      new BinaryMessageDecoder<Title>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Title> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Title> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Title>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Title to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Title from a ByteBuffer. */
  public static Title fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence nl;
  @Deprecated public java.lang.CharSequence fr;
  @Deprecated public java.lang.CharSequence de;
  @Deprecated public java.lang.CharSequence en;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Title() {}

  /**
   * All-args constructor.
   * @param nl The new value for nl
   * @param fr The new value for fr
   * @param de The new value for de
   * @param en The new value for en
   */
  public Title(java.lang.CharSequence nl, java.lang.CharSequence fr, java.lang.CharSequence de, java.lang.CharSequence en) {
    this.nl = nl;
    this.fr = fr;
    this.de = de;
    this.en = en;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nl;
    case 1: return fr;
    case 2: return de;
    case 3: return en;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nl = (java.lang.CharSequence)value$; break;
    case 1: fr = (java.lang.CharSequence)value$; break;
    case 2: de = (java.lang.CharSequence)value$; break;
    case 3: en = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nl' field.
   * @return The value of the 'nl' field.
   */
  public java.lang.CharSequence getNl() {
    return nl;
  }

  /**
   * Sets the value of the 'nl' field.
   * @param value the value to set.
   */
  public void setNl(java.lang.CharSequence value) {
    this.nl = value;
  }

  /**
   * Gets the value of the 'fr' field.
   * @return The value of the 'fr' field.
   */
  public java.lang.CharSequence getFr() {
    return fr;
  }

  /**
   * Sets the value of the 'fr' field.
   * @param value the value to set.
   */
  public void setFr(java.lang.CharSequence value) {
    this.fr = value;
  }

  /**
   * Gets the value of the 'de' field.
   * @return The value of the 'de' field.
   */
  public java.lang.CharSequence getDe() {
    return de;
  }

  /**
   * Sets the value of the 'de' field.
   * @param value the value to set.
   */
  public void setDe(java.lang.CharSequence value) {
    this.de = value;
  }

  /**
   * Gets the value of the 'en' field.
   * @return The value of the 'en' field.
   */
  public java.lang.CharSequence getEn() {
    return en;
  }

  /**
   * Sets the value of the 'en' field.
   * @param value the value to set.
   */
  public void setEn(java.lang.CharSequence value) {
    this.en = value;
  }

  /**
   * Creates a new Title RecordBuilder.
   * @return A new Title RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Title.Builder newBuilder() {
    return new avro_generated_types.root_view_entity.property.Title.Builder();
  }

  /**
   * Creates a new Title RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Title RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Title.Builder newBuilder(avro_generated_types.root_view_entity.property.Title.Builder other) {
    return new avro_generated_types.root_view_entity.property.Title.Builder(other);
  }

  /**
   * Creates a new Title RecordBuilder by copying an existing Title instance.
   * @param other The existing instance to copy.
   * @return A new Title RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Title.Builder newBuilder(avro_generated_types.root_view_entity.property.Title other) {
    return new avro_generated_types.root_view_entity.property.Title.Builder(other);
  }

  /**
   * RecordBuilder for Title instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Title>
    implements org.apache.avro.data.RecordBuilder<Title> {

    private java.lang.CharSequence nl;
    private java.lang.CharSequence fr;
    private java.lang.CharSequence de;
    private java.lang.CharSequence en;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro_generated_types.root_view_entity.property.Title.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nl)) {
        this.nl = data().deepCopy(fields()[0].schema(), other.nl);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fr)) {
        this.fr = data().deepCopy(fields()[1].schema(), other.fr);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.de)) {
        this.de = data().deepCopy(fields()[2].schema(), other.de);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.en)) {
        this.en = data().deepCopy(fields()[3].schema(), other.en);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Title instance
     * @param other The existing instance to copy.
     */
    private Builder(avro_generated_types.root_view_entity.property.Title other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.nl)) {
        this.nl = data().deepCopy(fields()[0].schema(), other.nl);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fr)) {
        this.fr = data().deepCopy(fields()[1].schema(), other.fr);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.de)) {
        this.de = data().deepCopy(fields()[2].schema(), other.de);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.en)) {
        this.en = data().deepCopy(fields()[3].schema(), other.en);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'nl' field.
      * @return The value.
      */
    public java.lang.CharSequence getNl() {
      return nl;
    }

    /**
      * Sets the value of the 'nl' field.
      * @param value The value of 'nl'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder setNl(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.nl = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nl' field has been set.
      * @return True if the 'nl' field has been set, false otherwise.
      */
    public boolean hasNl() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nl' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder clearNl() {
      nl = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fr' field.
      * @return The value.
      */
    public java.lang.CharSequence getFr() {
      return fr;
    }

    /**
      * Sets the value of the 'fr' field.
      * @param value The value of 'fr'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder setFr(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fr' field has been set.
      * @return True if the 'fr' field has been set, false otherwise.
      */
    public boolean hasFr() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fr' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder clearFr() {
      fr = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'de' field.
      * @return The value.
      */
    public java.lang.CharSequence getDe() {
      return de;
    }

    /**
      * Sets the value of the 'de' field.
      * @param value The value of 'de'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder setDe(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.de = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'de' field has been set.
      * @return True if the 'de' field has been set, false otherwise.
      */
    public boolean hasDe() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'de' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder clearDe() {
      de = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'en' field.
      * @return The value.
      */
    public java.lang.CharSequence getEn() {
      return en;
    }

    /**
      * Sets the value of the 'en' field.
      * @param value The value of 'en'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder setEn(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.en = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'en' field has been set.
      * @return True if the 'en' field has been set, false otherwise.
      */
    public boolean hasEn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'en' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Title.Builder clearEn() {
      en = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Title build() {
      try {
        Title record = new Title();
        record.nl = fieldSetFlags()[0] ? this.nl : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fr = fieldSetFlags()[1] ? this.fr : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.de = fieldSetFlags()[2] ? this.de : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.en = fieldSetFlags()[3] ? this.en : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Title>
    WRITER$ = (org.apache.avro.io.DatumWriter<Title>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Title>
    READER$ = (org.apache.avro.io.DatumReader<Title>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
