/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_generated_types;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Bid extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6464497190757742511L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bid\",\"namespace\":\"avro_generated_types\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"propertyId\",\"type\":[\"null\",\"string\"]},{\"name\":\"amount\",\"type\":[\"null\",\"string\"]},{\"name\":\"refused\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"__deleted\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"accountId\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bid> ENCODER =
      new BinaryMessageEncoder<Bid>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bid> DECODER =
      new BinaryMessageDecoder<Bid>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Bid> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Bid> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Bid>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Bid to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Bid from a ByteBuffer. */
  public static Bid fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence id;
  @Deprecated public CharSequence propertyId;
  @Deprecated public CharSequence amount;
  @Deprecated public Boolean refused;
  @Deprecated public Long timestamp;
  @Deprecated public Boolean __deleted;
  @Deprecated public CharSequence accountId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bid() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param propertyId The new value for propertyId
   * @param amount The new value for amount
   * @param refused The new value for refused
   * @param timestamp The new value for timestamp
   * @param __deleted The new value for __deleted
   * @param accountId The new value for accountId
   */
  public Bid(CharSequence id, CharSequence propertyId, CharSequence amount, Boolean refused, Long timestamp, Boolean __deleted, CharSequence accountId) {
    this.id = id;
    this.propertyId = propertyId;
    this.amount = amount;
    this.refused = refused;
    this.timestamp = timestamp;
    this.__deleted = __deleted;
    this.accountId = accountId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return propertyId;
    case 2: return amount;
    case 3: return refused;
    case 4: return timestamp;
    case 5: return __deleted;
    case 6: return accountId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: propertyId = (CharSequence)value$; break;
    case 2: amount = (CharSequence)value$; break;
    case 3: refused = (Boolean)value$; break;
    case 4: timestamp = (Long)value$; break;
    case 5: __deleted = (Boolean)value$; break;
    case 6: accountId = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'propertyId' field.
   * @return The value of the 'propertyId' field.
   */
  public CharSequence getPropertyId() {
    return propertyId;
  }

  /**
   * Sets the value of the 'propertyId' field.
   * @param value the value to set.
   */
  public void setPropertyId(CharSequence value) {
    this.propertyId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public CharSequence getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'refused' field.
   * @return The value of the 'refused' field.
   */
  public Boolean getRefused() {
    return refused;
  }

  /**
   * Sets the value of the 'refused' field.
   * @param value the value to set.
   */
  public void setRefused(Boolean value) {
    this.refused = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the '__deleted' field.
   * @return The value of the '__deleted' field.
   */
  public Boolean getDeleted$1() {
    return __deleted;
  }

  /**
   * Sets the value of the '__deleted' field.
   * @param value the value to set.
   */
  public void setDeleted$1(Boolean value) {
    this.__deleted = value;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public CharSequence getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(CharSequence value) {
    this.accountId = value;
  }

  /**
   * Creates a new Bid RecordBuilder.
   * @return A new Bid RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Bid RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bid RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Bid RecordBuilder by copying an existing Bid instance.
   * @param other The existing instance to copy.
   * @return A new Bid RecordBuilder
   */
  public static Builder newBuilder(Bid other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Bid instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bid>
    implements org.apache.avro.data.RecordBuilder<Bid> {

    private CharSequence id;
    private CharSequence propertyId;
    private CharSequence amount;
    private Boolean refused;
    private Long timestamp;
    private Boolean __deleted;
    private CharSequence accountId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.propertyId)) {
        this.propertyId = data().deepCopy(fields()[1].schema(), other.propertyId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.refused)) {
        this.refused = data().deepCopy(fields()[3].schema(), other.refused);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.__deleted)) {
        this.__deleted = data().deepCopy(fields()[5].schema(), other.__deleted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.accountId)) {
        this.accountId = data().deepCopy(fields()[6].schema(), other.accountId);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Bid instance
     * @param other The existing instance to copy.
     */
    private Builder(Bid other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.propertyId)) {
        this.propertyId = data().deepCopy(fields()[1].schema(), other.propertyId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.refused)) {
        this.refused = data().deepCopy(fields()[3].schema(), other.refused);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.__deleted)) {
        this.__deleted = data().deepCopy(fields()[5].schema(), other.__deleted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.accountId)) {
        this.accountId = data().deepCopy(fields()[6].schema(), other.accountId);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'propertyId' field.
      * @return The value.
      */
    public CharSequence getPropertyId() {
      return propertyId;
    }

    /**
      * Sets the value of the 'propertyId' field.
      * @param value The value of 'propertyId'.
      * @return This builder.
      */
    public Builder setPropertyId(CharSequence value) {
      validate(fields()[1], value);
      this.propertyId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'propertyId' field has been set.
      * @return True if the 'propertyId' field has been set, false otherwise.
      */
    public boolean hasPropertyId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'propertyId' field.
      * @return This builder.
      */
    public Builder clearPropertyId() {
      propertyId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public CharSequence getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public Builder setAmount(CharSequence value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'refused' field.
      * @return The value.
      */
    public Boolean getRefused() {
      return refused;
    }

    /**
      * Sets the value of the 'refused' field.
      * @param value The value of 'refused'.
      * @return This builder.
      */
    public Builder setRefused(Boolean value) {
      validate(fields()[3], value);
      this.refused = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'refused' field has been set.
      * @return True if the 'refused' field has been set, false otherwise.
      */
    public boolean hasRefused() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'refused' field.
      * @return This builder.
      */
    public Builder clearRefused() {
      refused = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(Long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the '__deleted' field.
      * @return The value.
      */
    public Boolean getDeleted$1() {
      return __deleted;
    }

    /**
      * Sets the value of the '__deleted' field.
      * @param value The value of '__deleted'.
      * @return This builder.
      */
    public Builder setDeleted$1(Boolean value) {
      validate(fields()[5], value);
      this.__deleted = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the '__deleted' field has been set.
      * @return True if the '__deleted' field has been set, false otherwise.
      */
    public boolean hasDeleted$1() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the '__deleted' field.
      * @return This builder.
      */
    public Builder clearDeleted$1() {
      __deleted = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public CharSequence getAccountId() {
      return accountId;
    }

    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public Builder setAccountId(CharSequence value) {
      validate(fields()[6], value);
      this.accountId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public Builder clearAccountId() {
      accountId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bid build() {
      try {
        Bid record = new Bid();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.propertyId = fieldSetFlags()[1] ? this.propertyId : (CharSequence) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (CharSequence) defaultValue(fields()[2]);
        record.refused = fieldSetFlags()[3] ? this.refused : (Boolean) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (Long) defaultValue(fields()[4]);
        record.__deleted = fieldSetFlags()[5] ? this.__deleted : (Boolean) defaultValue(fields()[5]);
        record.accountId = fieldSetFlags()[6] ? this.accountId : (CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bid>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bid>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bid>
    READER$ = (org.apache.avro.io.DatumReader<Bid>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
