/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_generated_types;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class View extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8366861664144380762L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"View\",\"namespace\":\"avro_generated_types\",\"fields\":[{\"name\":\"propertyId\",\"type\":[\"null\",\"string\"]},{\"name\":\"numberOfViews\",\"type\":[\"null\",\"long\"]},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<View> ENCODER =
      new BinaryMessageEncoder<View>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<View> DECODER =
      new BinaryMessageDecoder<View>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<View> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<View> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<View>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this View to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a View from a ByteBuffer. */
  public static View fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence propertyId;
  @Deprecated public Long numberOfViews;
  @Deprecated public Long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public View() {}

  /**
   * All-args constructor.
   * @param propertyId The new value for propertyId
   * @param numberOfViews The new value for numberOfViews
   * @param timestamp The new value for timestamp
   */
  public View(CharSequence propertyId, Long numberOfViews, Long timestamp) {
    this.propertyId = propertyId;
    this.numberOfViews = numberOfViews;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return propertyId;
    case 1: return numberOfViews;
    case 2: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: propertyId = (CharSequence)value$; break;
    case 1: numberOfViews = (Long)value$; break;
    case 2: timestamp = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'propertyId' field.
   * @return The value of the 'propertyId' field.
   */
  public CharSequence getPropertyId() {
    return propertyId;
  }

  /**
   * Sets the value of the 'propertyId' field.
   * @param value the value to set.
   */
  public void setPropertyId(CharSequence value) {
    this.propertyId = value;
  }

  /**
   * Gets the value of the 'numberOfViews' field.
   * @return The value of the 'numberOfViews' field.
   */
  public Long getNumberOfViews() {
    return numberOfViews;
  }

  /**
   * Sets the value of the 'numberOfViews' field.
   * @param value the value to set.
   */
  public void setNumberOfViews(Long value) {
    this.numberOfViews = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new View RecordBuilder.
   * @return A new View RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new View RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new View RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new View RecordBuilder by copying an existing View instance.
   * @param other The existing instance to copy.
   * @return A new View RecordBuilder
   */
  public static Builder newBuilder(View other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for View instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<View>
    implements org.apache.avro.data.RecordBuilder<View> {

    private CharSequence propertyId;
    private Long numberOfViews;
    private Long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.propertyId)) {
        this.propertyId = data().deepCopy(fields()[0].schema(), other.propertyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfViews)) {
        this.numberOfViews = data().deepCopy(fields()[1].schema(), other.numberOfViews);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing View instance
     * @param other The existing instance to copy.
     */
    private Builder(View other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.propertyId)) {
        this.propertyId = data().deepCopy(fields()[0].schema(), other.propertyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfViews)) {
        this.numberOfViews = data().deepCopy(fields()[1].schema(), other.numberOfViews);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'propertyId' field.
      * @return The value.
      */
    public CharSequence getPropertyId() {
      return propertyId;
    }

    /**
      * Sets the value of the 'propertyId' field.
      * @param value The value of 'propertyId'.
      * @return This builder.
      */
    public Builder setPropertyId(CharSequence value) {
      validate(fields()[0], value);
      this.propertyId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'propertyId' field has been set.
      * @return True if the 'propertyId' field has been set, false otherwise.
      */
    public boolean hasPropertyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'propertyId' field.
      * @return This builder.
      */
    public Builder clearPropertyId() {
      propertyId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfViews' field.
      * @return The value.
      */
    public Long getNumberOfViews() {
      return numberOfViews;
    }

    /**
      * Sets the value of the 'numberOfViews' field.
      * @param value The value of 'numberOfViews'.
      * @return This builder.
      */
    public Builder setNumberOfViews(Long value) {
      validate(fields()[1], value);
      this.numberOfViews = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfViews' field has been set.
      * @return True if the 'numberOfViews' field has been set, false otherwise.
      */
    public boolean hasNumberOfViews() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'numberOfViews' field.
      * @return This builder.
      */
    public Builder clearNumberOfViews() {
      numberOfViews = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(Long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public View build() {
      try {
        View record = new View();
        record.propertyId = fieldSetFlags()[0] ? this.propertyId : (CharSequence) defaultValue(fields()[0]);
        record.numberOfViews = fieldSetFlags()[1] ? this.numberOfViews : (Long) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<View>
    WRITER$ = (org.apache.avro.io.DatumWriter<View>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<View>
    READER$ = (org.apache.avro.io.DatumReader<View>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
