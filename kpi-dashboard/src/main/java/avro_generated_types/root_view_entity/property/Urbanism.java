/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_generated_types.root_view_entity.property;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Urbanism extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3501714882094589740L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Urbanism\",\"namespace\":\"avro_generated_types.root_view_entity.property\",\"fields\":[{\"name\":\"takeResponsibilityForMissingMandatoryUrbanisticInformation\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"urbanismDestinationRF\",\"type\":[\"null\",\"string\"]},{\"name\":\"floodZoneType\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasSubpoenaAccordingToArticles\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isPlanningPermitGranted\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isSubdivisionPermitGranted\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"hasPreEmptionRightRUP\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"urbanismDestination\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasRankingHeritage\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"hasCobatInfringement\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isInUnexploitedActivitySite\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isIncludedInExpropriationPlan\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isInPreEmptionRightArea\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"landUseType\",\"type\":[\"null\",\"string\"]},{\"name\":\"urbanismDestinationType\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasSubpoenaForUrbanismInfringement\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isGroupedPlanningPermitGranted\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"hasAlignmentPlan\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"cobatInfringementDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"cobatInfringementObject\",\"type\":[\"null\",\"string\"]},{\"name\":\"cobatInfringementConsequences\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasRentalProhibition\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"urbanismPermits\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Urbanismpermits\",\"namespace\":\"avro_generated_types.root_view_entity.property.urbanism\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"number\",\"type\":[\"null\",\"string\"]},{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"title\",\"type\":[\"null\",\"string\"]},{\"name\":\"refused\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"expired\",\"type\":[\"null\",\"boolean\"]}]}}},{\"name\":\"planningPermitNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"planningPermitDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"expropriationDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"preEmptionRightAreaDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"hasPreEmptionRight\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isAuthorizationSale\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isNatura2000Zone\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"permitNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"permitDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"infoRequestedAndWaitingPeriodDone\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"infoRequestedReceptionDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"groupedPlanningPermitNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"groupedPlanningPermitDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]},{\"name\":\"preEmptionRightDetails\",\"type\":[\"null\",\"string\"]},{\"name\":\"authorizationSaleDetails\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasAsBuiltAttestation\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"projectConditions\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Boolean takeResponsibilityForMissingMandatoryUrbanisticInformation;
  @Deprecated public java.lang.CharSequence urbanismDestinationRF;
  @Deprecated public java.lang.CharSequence floodZoneType;
  @Deprecated public java.lang.Boolean hasSubpoenaAccordingToArticles;
  @Deprecated public java.lang.Boolean isPlanningPermitGranted;
  @Deprecated public java.lang.Boolean isSubdivisionPermitGranted;
  @Deprecated public java.lang.Boolean hasPreEmptionRightRUP;
  @Deprecated public java.lang.CharSequence urbanismDestination;
  @Deprecated public java.lang.Boolean hasRankingHeritage;
  @Deprecated public java.lang.Boolean hasCobatInfringement;
  @Deprecated public java.lang.Boolean isInUnexploitedActivitySite;
  @Deprecated public java.lang.Boolean isIncludedInExpropriationPlan;
  @Deprecated public java.lang.Boolean isInPreEmptionRightArea;
  @Deprecated public java.lang.CharSequence landUseType;
  @Deprecated public java.lang.CharSequence urbanismDestinationType;
  @Deprecated public java.lang.Boolean hasSubpoenaForUrbanismInfringement;
  @Deprecated public java.lang.Boolean isGroupedPlanningPermitGranted;
  @Deprecated public java.lang.Boolean hasAlignmentPlan;
  @Deprecated public java.lang.Long cobatInfringementDate;
  @Deprecated public java.lang.CharSequence cobatInfringementObject;
  @Deprecated public java.lang.CharSequence cobatInfringementConsequences;
  @Deprecated public java.lang.Boolean hasRentalProhibition;
  @Deprecated public java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> urbanismPermits;
  @Deprecated public java.lang.CharSequence planningPermitNumber;
  @Deprecated public java.lang.Long planningPermitDate;
  @Deprecated public java.lang.Long expropriationDate;
  @Deprecated public java.lang.Long preEmptionRightAreaDate;
  @Deprecated public java.lang.Boolean hasPreEmptionRight;
  @Deprecated public java.lang.Boolean isAuthorizationSale;
  @Deprecated public java.lang.Boolean isNatura2000Zone;
  @Deprecated public java.lang.CharSequence permitNumber;
  @Deprecated public java.lang.Long permitDate;
  @Deprecated public java.lang.Boolean infoRequestedAndWaitingPeriodDone;
  @Deprecated public java.lang.Long infoRequestedReceptionDate;
  @Deprecated public java.lang.CharSequence groupedPlanningPermitNumber;
  @Deprecated public java.lang.Long groupedPlanningPermitDate;
  @Deprecated public java.lang.CharSequence preEmptionRightDetails;
  @Deprecated public java.lang.CharSequence authorizationSaleDetails;
  @Deprecated public java.lang.Boolean hasAsBuiltAttestation;
  @Deprecated public java.lang.CharSequence projectConditions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Urbanism() {}

  /**
   * All-args constructor.
   * @param takeResponsibilityForMissingMandatoryUrbanisticInformation The new value for takeResponsibilityForMissingMandatoryUrbanisticInformation
   * @param urbanismDestinationRF The new value for urbanismDestinationRF
   * @param floodZoneType The new value for floodZoneType
   * @param hasSubpoenaAccordingToArticles The new value for hasSubpoenaAccordingToArticles
   * @param isPlanningPermitGranted The new value for isPlanningPermitGranted
   * @param isSubdivisionPermitGranted The new value for isSubdivisionPermitGranted
   * @param hasPreEmptionRightRUP The new value for hasPreEmptionRightRUP
   * @param urbanismDestination The new value for urbanismDestination
   * @param hasRankingHeritage The new value for hasRankingHeritage
   * @param hasCobatInfringement The new value for hasCobatInfringement
   * @param isInUnexploitedActivitySite The new value for isInUnexploitedActivitySite
   * @param isIncludedInExpropriationPlan The new value for isIncludedInExpropriationPlan
   * @param isInPreEmptionRightArea The new value for isInPreEmptionRightArea
   * @param landUseType The new value for landUseType
   * @param urbanismDestinationType The new value for urbanismDestinationType
   * @param hasSubpoenaForUrbanismInfringement The new value for hasSubpoenaForUrbanismInfringement
   * @param isGroupedPlanningPermitGranted The new value for isGroupedPlanningPermitGranted
   * @param hasAlignmentPlan The new value for hasAlignmentPlan
   * @param cobatInfringementDate The new value for cobatInfringementDate
   * @param cobatInfringementObject The new value for cobatInfringementObject
   * @param cobatInfringementConsequences The new value for cobatInfringementConsequences
   * @param hasRentalProhibition The new value for hasRentalProhibition
   * @param urbanismPermits The new value for urbanismPermits
   * @param planningPermitNumber The new value for planningPermitNumber
   * @param planningPermitDate The new value for planningPermitDate
   * @param expropriationDate The new value for expropriationDate
   * @param preEmptionRightAreaDate The new value for preEmptionRightAreaDate
   * @param hasPreEmptionRight The new value for hasPreEmptionRight
   * @param isAuthorizationSale The new value for isAuthorizationSale
   * @param isNatura2000Zone The new value for isNatura2000Zone
   * @param permitNumber The new value for permitNumber
   * @param permitDate The new value for permitDate
   * @param infoRequestedAndWaitingPeriodDone The new value for infoRequestedAndWaitingPeriodDone
   * @param infoRequestedReceptionDate The new value for infoRequestedReceptionDate
   * @param groupedPlanningPermitNumber The new value for groupedPlanningPermitNumber
   * @param groupedPlanningPermitDate The new value for groupedPlanningPermitDate
   * @param preEmptionRightDetails The new value for preEmptionRightDetails
   * @param authorizationSaleDetails The new value for authorizationSaleDetails
   * @param hasAsBuiltAttestation The new value for hasAsBuiltAttestation
   * @param projectConditions The new value for projectConditions
   */
  public Urbanism(java.lang.Boolean takeResponsibilityForMissingMandatoryUrbanisticInformation, java.lang.CharSequence urbanismDestinationRF, java.lang.CharSequence floodZoneType, java.lang.Boolean hasSubpoenaAccordingToArticles, java.lang.Boolean isPlanningPermitGranted, java.lang.Boolean isSubdivisionPermitGranted, java.lang.Boolean hasPreEmptionRightRUP, java.lang.CharSequence urbanismDestination, java.lang.Boolean hasRankingHeritage, java.lang.Boolean hasCobatInfringement, java.lang.Boolean isInUnexploitedActivitySite, java.lang.Boolean isIncludedInExpropriationPlan, java.lang.Boolean isInPreEmptionRightArea, java.lang.CharSequence landUseType, java.lang.CharSequence urbanismDestinationType, java.lang.Boolean hasSubpoenaForUrbanismInfringement, java.lang.Boolean isGroupedPlanningPermitGranted, java.lang.Boolean hasAlignmentPlan, java.lang.Long cobatInfringementDate, java.lang.CharSequence cobatInfringementObject, java.lang.CharSequence cobatInfringementConsequences, java.lang.Boolean hasRentalProhibition, java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> urbanismPermits, java.lang.CharSequence planningPermitNumber, java.lang.Long planningPermitDate, java.lang.Long expropriationDate, java.lang.Long preEmptionRightAreaDate, java.lang.Boolean hasPreEmptionRight, java.lang.Boolean isAuthorizationSale, java.lang.Boolean isNatura2000Zone, java.lang.CharSequence permitNumber, java.lang.Long permitDate, java.lang.Boolean infoRequestedAndWaitingPeriodDone, java.lang.Long infoRequestedReceptionDate, java.lang.CharSequence groupedPlanningPermitNumber, java.lang.Long groupedPlanningPermitDate, java.lang.CharSequence preEmptionRightDetails, java.lang.CharSequence authorizationSaleDetails, java.lang.Boolean hasAsBuiltAttestation, java.lang.CharSequence projectConditions) {
    this.takeResponsibilityForMissingMandatoryUrbanisticInformation = takeResponsibilityForMissingMandatoryUrbanisticInformation;
    this.urbanismDestinationRF = urbanismDestinationRF;
    this.floodZoneType = floodZoneType;
    this.hasSubpoenaAccordingToArticles = hasSubpoenaAccordingToArticles;
    this.isPlanningPermitGranted = isPlanningPermitGranted;
    this.isSubdivisionPermitGranted = isSubdivisionPermitGranted;
    this.hasPreEmptionRightRUP = hasPreEmptionRightRUP;
    this.urbanismDestination = urbanismDestination;
    this.hasRankingHeritage = hasRankingHeritage;
    this.hasCobatInfringement = hasCobatInfringement;
    this.isInUnexploitedActivitySite = isInUnexploitedActivitySite;
    this.isIncludedInExpropriationPlan = isIncludedInExpropriationPlan;
    this.isInPreEmptionRightArea = isInPreEmptionRightArea;
    this.landUseType = landUseType;
    this.urbanismDestinationType = urbanismDestinationType;
    this.hasSubpoenaForUrbanismInfringement = hasSubpoenaForUrbanismInfringement;
    this.isGroupedPlanningPermitGranted = isGroupedPlanningPermitGranted;
    this.hasAlignmentPlan = hasAlignmentPlan;
    this.cobatInfringementDate = cobatInfringementDate;
    this.cobatInfringementObject = cobatInfringementObject;
    this.cobatInfringementConsequences = cobatInfringementConsequences;
    this.hasRentalProhibition = hasRentalProhibition;
    this.urbanismPermits = urbanismPermits;
    this.planningPermitNumber = planningPermitNumber;
    this.planningPermitDate = planningPermitDate;
    this.expropriationDate = expropriationDate;
    this.preEmptionRightAreaDate = preEmptionRightAreaDate;
    this.hasPreEmptionRight = hasPreEmptionRight;
    this.isAuthorizationSale = isAuthorizationSale;
    this.isNatura2000Zone = isNatura2000Zone;
    this.permitNumber = permitNumber;
    this.permitDate = permitDate;
    this.infoRequestedAndWaitingPeriodDone = infoRequestedAndWaitingPeriodDone;
    this.infoRequestedReceptionDate = infoRequestedReceptionDate;
    this.groupedPlanningPermitNumber = groupedPlanningPermitNumber;
    this.groupedPlanningPermitDate = groupedPlanningPermitDate;
    this.preEmptionRightDetails = preEmptionRightDetails;
    this.authorizationSaleDetails = authorizationSaleDetails;
    this.hasAsBuiltAttestation = hasAsBuiltAttestation;
    this.projectConditions = projectConditions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return takeResponsibilityForMissingMandatoryUrbanisticInformation;
    case 1: return urbanismDestinationRF;
    case 2: return floodZoneType;
    case 3: return hasSubpoenaAccordingToArticles;
    case 4: return isPlanningPermitGranted;
    case 5: return isSubdivisionPermitGranted;
    case 6: return hasPreEmptionRightRUP;
    case 7: return urbanismDestination;
    case 8: return hasRankingHeritage;
    case 9: return hasCobatInfringement;
    case 10: return isInUnexploitedActivitySite;
    case 11: return isIncludedInExpropriationPlan;
    case 12: return isInPreEmptionRightArea;
    case 13: return landUseType;
    case 14: return urbanismDestinationType;
    case 15: return hasSubpoenaForUrbanismInfringement;
    case 16: return isGroupedPlanningPermitGranted;
    case 17: return hasAlignmentPlan;
    case 18: return cobatInfringementDate;
    case 19: return cobatInfringementObject;
    case 20: return cobatInfringementConsequences;
    case 21: return hasRentalProhibition;
    case 22: return urbanismPermits;
    case 23: return planningPermitNumber;
    case 24: return planningPermitDate;
    case 25: return expropriationDate;
    case 26: return preEmptionRightAreaDate;
    case 27: return hasPreEmptionRight;
    case 28: return isAuthorizationSale;
    case 29: return isNatura2000Zone;
    case 30: return permitNumber;
    case 31: return permitDate;
    case 32: return infoRequestedAndWaitingPeriodDone;
    case 33: return infoRequestedReceptionDate;
    case 34: return groupedPlanningPermitNumber;
    case 35: return groupedPlanningPermitDate;
    case 36: return preEmptionRightDetails;
    case 37: return authorizationSaleDetails;
    case 38: return hasAsBuiltAttestation;
    case 39: return projectConditions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: takeResponsibilityForMissingMandatoryUrbanisticInformation = (java.lang.Boolean)value$; break;
    case 1: urbanismDestinationRF = (java.lang.CharSequence)value$; break;
    case 2: floodZoneType = (java.lang.CharSequence)value$; break;
    case 3: hasSubpoenaAccordingToArticles = (java.lang.Boolean)value$; break;
    case 4: isPlanningPermitGranted = (java.lang.Boolean)value$; break;
    case 5: isSubdivisionPermitGranted = (java.lang.Boolean)value$; break;
    case 6: hasPreEmptionRightRUP = (java.lang.Boolean)value$; break;
    case 7: urbanismDestination = (java.lang.CharSequence)value$; break;
    case 8: hasRankingHeritage = (java.lang.Boolean)value$; break;
    case 9: hasCobatInfringement = (java.lang.Boolean)value$; break;
    case 10: isInUnexploitedActivitySite = (java.lang.Boolean)value$; break;
    case 11: isIncludedInExpropriationPlan = (java.lang.Boolean)value$; break;
    case 12: isInPreEmptionRightArea = (java.lang.Boolean)value$; break;
    case 13: landUseType = (java.lang.CharSequence)value$; break;
    case 14: urbanismDestinationType = (java.lang.CharSequence)value$; break;
    case 15: hasSubpoenaForUrbanismInfringement = (java.lang.Boolean)value$; break;
    case 16: isGroupedPlanningPermitGranted = (java.lang.Boolean)value$; break;
    case 17: hasAlignmentPlan = (java.lang.Boolean)value$; break;
    case 18: cobatInfringementDate = (java.lang.Long)value$; break;
    case 19: cobatInfringementObject = (java.lang.CharSequence)value$; break;
    case 20: cobatInfringementConsequences = (java.lang.CharSequence)value$; break;
    case 21: hasRentalProhibition = (java.lang.Boolean)value$; break;
    case 22: urbanismPermits = (java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits>)value$; break;
    case 23: planningPermitNumber = (java.lang.CharSequence)value$; break;
    case 24: planningPermitDate = (java.lang.Long)value$; break;
    case 25: expropriationDate = (java.lang.Long)value$; break;
    case 26: preEmptionRightAreaDate = (java.lang.Long)value$; break;
    case 27: hasPreEmptionRight = (java.lang.Boolean)value$; break;
    case 28: isAuthorizationSale = (java.lang.Boolean)value$; break;
    case 29: isNatura2000Zone = (java.lang.Boolean)value$; break;
    case 30: permitNumber = (java.lang.CharSequence)value$; break;
    case 31: permitDate = (java.lang.Long)value$; break;
    case 32: infoRequestedAndWaitingPeriodDone = (java.lang.Boolean)value$; break;
    case 33: infoRequestedReceptionDate = (java.lang.Long)value$; break;
    case 34: groupedPlanningPermitNumber = (java.lang.CharSequence)value$; break;
    case 35: groupedPlanningPermitDate = (java.lang.Long)value$; break;
    case 36: preEmptionRightDetails = (java.lang.CharSequence)value$; break;
    case 37: authorizationSaleDetails = (java.lang.CharSequence)value$; break;
    case 38: hasAsBuiltAttestation = (java.lang.Boolean)value$; break;
    case 39: projectConditions = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field.
   * @return The value of the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field.
   */
  public java.lang.Boolean getTakeResponsibilityForMissingMandatoryUrbanisticInformation() {
    return takeResponsibilityForMissingMandatoryUrbanisticInformation;
  }

  /**
   * Sets the value of the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field.
   * @param value the value to set.
   */
  public void setTakeResponsibilityForMissingMandatoryUrbanisticInformation(java.lang.Boolean value) {
    this.takeResponsibilityForMissingMandatoryUrbanisticInformation = value;
  }

  /**
   * Gets the value of the 'urbanismDestinationRF' field.
   * @return The value of the 'urbanismDestinationRF' field.
   */
  public java.lang.CharSequence getUrbanismDestinationRF() {
    return urbanismDestinationRF;
  }

  /**
   * Sets the value of the 'urbanismDestinationRF' field.
   * @param value the value to set.
   */
  public void setUrbanismDestinationRF(java.lang.CharSequence value) {
    this.urbanismDestinationRF = value;
  }

  /**
   * Gets the value of the 'floodZoneType' field.
   * @return The value of the 'floodZoneType' field.
   */
  public java.lang.CharSequence getFloodZoneType() {
    return floodZoneType;
  }

  /**
   * Sets the value of the 'floodZoneType' field.
   * @param value the value to set.
   */
  public void setFloodZoneType(java.lang.CharSequence value) {
    this.floodZoneType = value;
  }

  /**
   * Gets the value of the 'hasSubpoenaAccordingToArticles' field.
   * @return The value of the 'hasSubpoenaAccordingToArticles' field.
   */
  public java.lang.Boolean getHasSubpoenaAccordingToArticles() {
    return hasSubpoenaAccordingToArticles;
  }

  /**
   * Sets the value of the 'hasSubpoenaAccordingToArticles' field.
   * @param value the value to set.
   */
  public void setHasSubpoenaAccordingToArticles(java.lang.Boolean value) {
    this.hasSubpoenaAccordingToArticles = value;
  }

  /**
   * Gets the value of the 'isPlanningPermitGranted' field.
   * @return The value of the 'isPlanningPermitGranted' field.
   */
  public java.lang.Boolean getIsPlanningPermitGranted() {
    return isPlanningPermitGranted;
  }

  /**
   * Sets the value of the 'isPlanningPermitGranted' field.
   * @param value the value to set.
   */
  public void setIsPlanningPermitGranted(java.lang.Boolean value) {
    this.isPlanningPermitGranted = value;
  }

  /**
   * Gets the value of the 'isSubdivisionPermitGranted' field.
   * @return The value of the 'isSubdivisionPermitGranted' field.
   */
  public java.lang.Boolean getIsSubdivisionPermitGranted() {
    return isSubdivisionPermitGranted;
  }

  /**
   * Sets the value of the 'isSubdivisionPermitGranted' field.
   * @param value the value to set.
   */
  public void setIsSubdivisionPermitGranted(java.lang.Boolean value) {
    this.isSubdivisionPermitGranted = value;
  }

  /**
   * Gets the value of the 'hasPreEmptionRightRUP' field.
   * @return The value of the 'hasPreEmptionRightRUP' field.
   */
  public java.lang.Boolean getHasPreEmptionRightRUP() {
    return hasPreEmptionRightRUP;
  }

  /**
   * Sets the value of the 'hasPreEmptionRightRUP' field.
   * @param value the value to set.
   */
  public void setHasPreEmptionRightRUP(java.lang.Boolean value) {
    this.hasPreEmptionRightRUP = value;
  }

  /**
   * Gets the value of the 'urbanismDestination' field.
   * @return The value of the 'urbanismDestination' field.
   */
  public java.lang.CharSequence getUrbanismDestination() {
    return urbanismDestination;
  }

  /**
   * Sets the value of the 'urbanismDestination' field.
   * @param value the value to set.
   */
  public void setUrbanismDestination(java.lang.CharSequence value) {
    this.urbanismDestination = value;
  }

  /**
   * Gets the value of the 'hasRankingHeritage' field.
   * @return The value of the 'hasRankingHeritage' field.
   */
  public java.lang.Boolean getHasRankingHeritage() {
    return hasRankingHeritage;
  }

  /**
   * Sets the value of the 'hasRankingHeritage' field.
   * @param value the value to set.
   */
  public void setHasRankingHeritage(java.lang.Boolean value) {
    this.hasRankingHeritage = value;
  }

  /**
   * Gets the value of the 'hasCobatInfringement' field.
   * @return The value of the 'hasCobatInfringement' field.
   */
  public java.lang.Boolean getHasCobatInfringement() {
    return hasCobatInfringement;
  }

  /**
   * Sets the value of the 'hasCobatInfringement' field.
   * @param value the value to set.
   */
  public void setHasCobatInfringement(java.lang.Boolean value) {
    this.hasCobatInfringement = value;
  }

  /**
   * Gets the value of the 'isInUnexploitedActivitySite' field.
   * @return The value of the 'isInUnexploitedActivitySite' field.
   */
  public java.lang.Boolean getIsInUnexploitedActivitySite() {
    return isInUnexploitedActivitySite;
  }

  /**
   * Sets the value of the 'isInUnexploitedActivitySite' field.
   * @param value the value to set.
   */
  public void setIsInUnexploitedActivitySite(java.lang.Boolean value) {
    this.isInUnexploitedActivitySite = value;
  }

  /**
   * Gets the value of the 'isIncludedInExpropriationPlan' field.
   * @return The value of the 'isIncludedInExpropriationPlan' field.
   */
  public java.lang.Boolean getIsIncludedInExpropriationPlan() {
    return isIncludedInExpropriationPlan;
  }

  /**
   * Sets the value of the 'isIncludedInExpropriationPlan' field.
   * @param value the value to set.
   */
  public void setIsIncludedInExpropriationPlan(java.lang.Boolean value) {
    this.isIncludedInExpropriationPlan = value;
  }

  /**
   * Gets the value of the 'isInPreEmptionRightArea' field.
   * @return The value of the 'isInPreEmptionRightArea' field.
   */
  public java.lang.Boolean getIsInPreEmptionRightArea() {
    return isInPreEmptionRightArea;
  }

  /**
   * Sets the value of the 'isInPreEmptionRightArea' field.
   * @param value the value to set.
   */
  public void setIsInPreEmptionRightArea(java.lang.Boolean value) {
    this.isInPreEmptionRightArea = value;
  }

  /**
   * Gets the value of the 'landUseType' field.
   * @return The value of the 'landUseType' field.
   */
  public java.lang.CharSequence getLandUseType() {
    return landUseType;
  }

  /**
   * Sets the value of the 'landUseType' field.
   * @param value the value to set.
   */
  public void setLandUseType(java.lang.CharSequence value) {
    this.landUseType = value;
  }

  /**
   * Gets the value of the 'urbanismDestinationType' field.
   * @return The value of the 'urbanismDestinationType' field.
   */
  public java.lang.CharSequence getUrbanismDestinationType() {
    return urbanismDestinationType;
  }

  /**
   * Sets the value of the 'urbanismDestinationType' field.
   * @param value the value to set.
   */
  public void setUrbanismDestinationType(java.lang.CharSequence value) {
    this.urbanismDestinationType = value;
  }

  /**
   * Gets the value of the 'hasSubpoenaForUrbanismInfringement' field.
   * @return The value of the 'hasSubpoenaForUrbanismInfringement' field.
   */
  public java.lang.Boolean getHasSubpoenaForUrbanismInfringement() {
    return hasSubpoenaForUrbanismInfringement;
  }

  /**
   * Sets the value of the 'hasSubpoenaForUrbanismInfringement' field.
   * @param value the value to set.
   */
  public void setHasSubpoenaForUrbanismInfringement(java.lang.Boolean value) {
    this.hasSubpoenaForUrbanismInfringement = value;
  }

  /**
   * Gets the value of the 'isGroupedPlanningPermitGranted' field.
   * @return The value of the 'isGroupedPlanningPermitGranted' field.
   */
  public java.lang.Boolean getIsGroupedPlanningPermitGranted() {
    return isGroupedPlanningPermitGranted;
  }

  /**
   * Sets the value of the 'isGroupedPlanningPermitGranted' field.
   * @param value the value to set.
   */
  public void setIsGroupedPlanningPermitGranted(java.lang.Boolean value) {
    this.isGroupedPlanningPermitGranted = value;
  }

  /**
   * Gets the value of the 'hasAlignmentPlan' field.
   * @return The value of the 'hasAlignmentPlan' field.
   */
  public java.lang.Boolean getHasAlignmentPlan() {
    return hasAlignmentPlan;
  }

  /**
   * Sets the value of the 'hasAlignmentPlan' field.
   * @param value the value to set.
   */
  public void setHasAlignmentPlan(java.lang.Boolean value) {
    this.hasAlignmentPlan = value;
  }

  /**
   * Gets the value of the 'cobatInfringementDate' field.
   * @return The value of the 'cobatInfringementDate' field.
   */
  public java.lang.Long getCobatInfringementDate() {
    return cobatInfringementDate;
  }

  /**
   * Sets the value of the 'cobatInfringementDate' field.
   * @param value the value to set.
   */
  public void setCobatInfringementDate(java.lang.Long value) {
    this.cobatInfringementDate = value;
  }

  /**
   * Gets the value of the 'cobatInfringementObject' field.
   * @return The value of the 'cobatInfringementObject' field.
   */
  public java.lang.CharSequence getCobatInfringementObject() {
    return cobatInfringementObject;
  }

  /**
   * Sets the value of the 'cobatInfringementObject' field.
   * @param value the value to set.
   */
  public void setCobatInfringementObject(java.lang.CharSequence value) {
    this.cobatInfringementObject = value;
  }

  /**
   * Gets the value of the 'cobatInfringementConsequences' field.
   * @return The value of the 'cobatInfringementConsequences' field.
   */
  public java.lang.CharSequence getCobatInfringementConsequences() {
    return cobatInfringementConsequences;
  }

  /**
   * Sets the value of the 'cobatInfringementConsequences' field.
   * @param value the value to set.
   */
  public void setCobatInfringementConsequences(java.lang.CharSequence value) {
    this.cobatInfringementConsequences = value;
  }

  /**
   * Gets the value of the 'hasRentalProhibition' field.
   * @return The value of the 'hasRentalProhibition' field.
   */
  public java.lang.Boolean getHasRentalProhibition() {
    return hasRentalProhibition;
  }

  /**
   * Sets the value of the 'hasRentalProhibition' field.
   * @param value the value to set.
   */
  public void setHasRentalProhibition(java.lang.Boolean value) {
    this.hasRentalProhibition = value;
  }

  /**
   * Gets the value of the 'urbanismPermits' field.
   * @return The value of the 'urbanismPermits' field.
   */
  public java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> getUrbanismPermits() {
    return urbanismPermits;
  }

  /**
   * Sets the value of the 'urbanismPermits' field.
   * @param value the value to set.
   */
  public void setUrbanismPermits(java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> value) {
    this.urbanismPermits = value;
  }

  /**
   * Gets the value of the 'planningPermitNumber' field.
   * @return The value of the 'planningPermitNumber' field.
   */
  public java.lang.CharSequence getPlanningPermitNumber() {
    return planningPermitNumber;
  }

  /**
   * Sets the value of the 'planningPermitNumber' field.
   * @param value the value to set.
   */
  public void setPlanningPermitNumber(java.lang.CharSequence value) {
    this.planningPermitNumber = value;
  }

  /**
   * Gets the value of the 'planningPermitDate' field.
   * @return The value of the 'planningPermitDate' field.
   */
  public java.lang.Long getPlanningPermitDate() {
    return planningPermitDate;
  }

  /**
   * Sets the value of the 'planningPermitDate' field.
   * @param value the value to set.
   */
  public void setPlanningPermitDate(java.lang.Long value) {
    this.planningPermitDate = value;
  }

  /**
   * Gets the value of the 'expropriationDate' field.
   * @return The value of the 'expropriationDate' field.
   */
  public java.lang.Long getExpropriationDate() {
    return expropriationDate;
  }

  /**
   * Sets the value of the 'expropriationDate' field.
   * @param value the value to set.
   */
  public void setExpropriationDate(java.lang.Long value) {
    this.expropriationDate = value;
  }

  /**
   * Gets the value of the 'preEmptionRightAreaDate' field.
   * @return The value of the 'preEmptionRightAreaDate' field.
   */
  public java.lang.Long getPreEmptionRightAreaDate() {
    return preEmptionRightAreaDate;
  }

  /**
   * Sets the value of the 'preEmptionRightAreaDate' field.
   * @param value the value to set.
   */
  public void setPreEmptionRightAreaDate(java.lang.Long value) {
    this.preEmptionRightAreaDate = value;
  }

  /**
   * Gets the value of the 'hasPreEmptionRight' field.
   * @return The value of the 'hasPreEmptionRight' field.
   */
  public java.lang.Boolean getHasPreEmptionRight() {
    return hasPreEmptionRight;
  }

  /**
   * Sets the value of the 'hasPreEmptionRight' field.
   * @param value the value to set.
   */
  public void setHasPreEmptionRight(java.lang.Boolean value) {
    this.hasPreEmptionRight = value;
  }

  /**
   * Gets the value of the 'isAuthorizationSale' field.
   * @return The value of the 'isAuthorizationSale' field.
   */
  public java.lang.Boolean getIsAuthorizationSale() {
    return isAuthorizationSale;
  }

  /**
   * Sets the value of the 'isAuthorizationSale' field.
   * @param value the value to set.
   */
  public void setIsAuthorizationSale(java.lang.Boolean value) {
    this.isAuthorizationSale = value;
  }

  /**
   * Gets the value of the 'isNatura2000Zone' field.
   * @return The value of the 'isNatura2000Zone' field.
   */
  public java.lang.Boolean getIsNatura2000Zone() {
    return isNatura2000Zone;
  }

  /**
   * Sets the value of the 'isNatura2000Zone' field.
   * @param value the value to set.
   */
  public void setIsNatura2000Zone(java.lang.Boolean value) {
    this.isNatura2000Zone = value;
  }

  /**
   * Gets the value of the 'permitNumber' field.
   * @return The value of the 'permitNumber' field.
   */
  public java.lang.CharSequence getPermitNumber() {
    return permitNumber;
  }

  /**
   * Sets the value of the 'permitNumber' field.
   * @param value the value to set.
   */
  public void setPermitNumber(java.lang.CharSequence value) {
    this.permitNumber = value;
  }

  /**
   * Gets the value of the 'permitDate' field.
   * @return The value of the 'permitDate' field.
   */
  public java.lang.Long getPermitDate() {
    return permitDate;
  }

  /**
   * Sets the value of the 'permitDate' field.
   * @param value the value to set.
   */
  public void setPermitDate(java.lang.Long value) {
    this.permitDate = value;
  }

  /**
   * Gets the value of the 'infoRequestedAndWaitingPeriodDone' field.
   * @return The value of the 'infoRequestedAndWaitingPeriodDone' field.
   */
  public java.lang.Boolean getInfoRequestedAndWaitingPeriodDone() {
    return infoRequestedAndWaitingPeriodDone;
  }

  /**
   * Sets the value of the 'infoRequestedAndWaitingPeriodDone' field.
   * @param value the value to set.
   */
  public void setInfoRequestedAndWaitingPeriodDone(java.lang.Boolean value) {
    this.infoRequestedAndWaitingPeriodDone = value;
  }

  /**
   * Gets the value of the 'infoRequestedReceptionDate' field.
   * @return The value of the 'infoRequestedReceptionDate' field.
   */
  public java.lang.Long getInfoRequestedReceptionDate() {
    return infoRequestedReceptionDate;
  }

  /**
   * Sets the value of the 'infoRequestedReceptionDate' field.
   * @param value the value to set.
   */
  public void setInfoRequestedReceptionDate(java.lang.Long value) {
    this.infoRequestedReceptionDate = value;
  }

  /**
   * Gets the value of the 'groupedPlanningPermitNumber' field.
   * @return The value of the 'groupedPlanningPermitNumber' field.
   */
  public java.lang.CharSequence getGroupedPlanningPermitNumber() {
    return groupedPlanningPermitNumber;
  }

  /**
   * Sets the value of the 'groupedPlanningPermitNumber' field.
   * @param value the value to set.
   */
  public void setGroupedPlanningPermitNumber(java.lang.CharSequence value) {
    this.groupedPlanningPermitNumber = value;
  }

  /**
   * Gets the value of the 'groupedPlanningPermitDate' field.
   * @return The value of the 'groupedPlanningPermitDate' field.
   */
  public java.lang.Long getGroupedPlanningPermitDate() {
    return groupedPlanningPermitDate;
  }

  /**
   * Sets the value of the 'groupedPlanningPermitDate' field.
   * @param value the value to set.
   */
  public void setGroupedPlanningPermitDate(java.lang.Long value) {
    this.groupedPlanningPermitDate = value;
  }

  /**
   * Gets the value of the 'preEmptionRightDetails' field.
   * @return The value of the 'preEmptionRightDetails' field.
   */
  public java.lang.CharSequence getPreEmptionRightDetails() {
    return preEmptionRightDetails;
  }

  /**
   * Sets the value of the 'preEmptionRightDetails' field.
   * @param value the value to set.
   */
  public void setPreEmptionRightDetails(java.lang.CharSequence value) {
    this.preEmptionRightDetails = value;
  }

  /**
   * Gets the value of the 'authorizationSaleDetails' field.
   * @return The value of the 'authorizationSaleDetails' field.
   */
  public java.lang.CharSequence getAuthorizationSaleDetails() {
    return authorizationSaleDetails;
  }

  /**
   * Sets the value of the 'authorizationSaleDetails' field.
   * @param value the value to set.
   */
  public void setAuthorizationSaleDetails(java.lang.CharSequence value) {
    this.authorizationSaleDetails = value;
  }

  /**
   * Gets the value of the 'hasAsBuiltAttestation' field.
   * @return The value of the 'hasAsBuiltAttestation' field.
   */
  public java.lang.Boolean getHasAsBuiltAttestation() {
    return hasAsBuiltAttestation;
  }

  /**
   * Sets the value of the 'hasAsBuiltAttestation' field.
   * @param value the value to set.
   */
  public void setHasAsBuiltAttestation(java.lang.Boolean value) {
    this.hasAsBuiltAttestation = value;
  }

  /**
   * Gets the value of the 'projectConditions' field.
   * @return The value of the 'projectConditions' field.
   */
  public java.lang.CharSequence getProjectConditions() {
    return projectConditions;
  }

  /**
   * Sets the value of the 'projectConditions' field.
   * @param value the value to set.
   */
  public void setProjectConditions(java.lang.CharSequence value) {
    this.projectConditions = value;
  }

  /**
   * Creates a new Urbanism RecordBuilder.
   * @return A new Urbanism RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Urbanism.Builder newBuilder() {
    return new avro_generated_types.root_view_entity.property.Urbanism.Builder();
  }

  /**
   * Creates a new Urbanism RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Urbanism RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Urbanism.Builder newBuilder(avro_generated_types.root_view_entity.property.Urbanism.Builder other) {
    return new avro_generated_types.root_view_entity.property.Urbanism.Builder(other);
  }

  /**
   * Creates a new Urbanism RecordBuilder by copying an existing Urbanism instance.
   * @param other The existing instance to copy.
   * @return A new Urbanism RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Urbanism.Builder newBuilder(avro_generated_types.root_view_entity.property.Urbanism other) {
    return new avro_generated_types.root_view_entity.property.Urbanism.Builder(other);
  }

  /**
   * RecordBuilder for Urbanism instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Urbanism>
    implements org.apache.avro.data.RecordBuilder<Urbanism> {

    private java.lang.Boolean takeResponsibilityForMissingMandatoryUrbanisticInformation;
    private java.lang.CharSequence urbanismDestinationRF;
    private java.lang.CharSequence floodZoneType;
    private java.lang.Boolean hasSubpoenaAccordingToArticles;
    private java.lang.Boolean isPlanningPermitGranted;
    private java.lang.Boolean isSubdivisionPermitGranted;
    private java.lang.Boolean hasPreEmptionRightRUP;
    private java.lang.CharSequence urbanismDestination;
    private java.lang.Boolean hasRankingHeritage;
    private java.lang.Boolean hasCobatInfringement;
    private java.lang.Boolean isInUnexploitedActivitySite;
    private java.lang.Boolean isIncludedInExpropriationPlan;
    private java.lang.Boolean isInPreEmptionRightArea;
    private java.lang.CharSequence landUseType;
    private java.lang.CharSequence urbanismDestinationType;
    private java.lang.Boolean hasSubpoenaForUrbanismInfringement;
    private java.lang.Boolean isGroupedPlanningPermitGranted;
    private java.lang.Boolean hasAlignmentPlan;
    private java.lang.Long cobatInfringementDate;
    private java.lang.CharSequence cobatInfringementObject;
    private java.lang.CharSequence cobatInfringementConsequences;
    private java.lang.Boolean hasRentalProhibition;
    private java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> urbanismPermits;
    private java.lang.CharSequence planningPermitNumber;
    private java.lang.Long planningPermitDate;
    private java.lang.Long expropriationDate;
    private java.lang.Long preEmptionRightAreaDate;
    private java.lang.Boolean hasPreEmptionRight;
    private java.lang.Boolean isAuthorizationSale;
    private java.lang.Boolean isNatura2000Zone;
    private java.lang.CharSequence permitNumber;
    private java.lang.Long permitDate;
    private java.lang.Boolean infoRequestedAndWaitingPeriodDone;
    private java.lang.Long infoRequestedReceptionDate;
    private java.lang.CharSequence groupedPlanningPermitNumber;
    private java.lang.Long groupedPlanningPermitDate;
    private java.lang.CharSequence preEmptionRightDetails;
    private java.lang.CharSequence authorizationSaleDetails;
    private java.lang.Boolean hasAsBuiltAttestation;
    private java.lang.CharSequence projectConditions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro_generated_types.root_view_entity.property.Urbanism.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.takeResponsibilityForMissingMandatoryUrbanisticInformation)) {
        this.takeResponsibilityForMissingMandatoryUrbanisticInformation = data().deepCopy(fields()[0].schema(), other.takeResponsibilityForMissingMandatoryUrbanisticInformation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.urbanismDestinationRF)) {
        this.urbanismDestinationRF = data().deepCopy(fields()[1].schema(), other.urbanismDestinationRF);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.floodZoneType)) {
        this.floodZoneType = data().deepCopy(fields()[2].schema(), other.floodZoneType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hasSubpoenaAccordingToArticles)) {
        this.hasSubpoenaAccordingToArticles = data().deepCopy(fields()[3].schema(), other.hasSubpoenaAccordingToArticles);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isPlanningPermitGranted)) {
        this.isPlanningPermitGranted = data().deepCopy(fields()[4].schema(), other.isPlanningPermitGranted);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isSubdivisionPermitGranted)) {
        this.isSubdivisionPermitGranted = data().deepCopy(fields()[5].schema(), other.isSubdivisionPermitGranted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hasPreEmptionRightRUP)) {
        this.hasPreEmptionRightRUP = data().deepCopy(fields()[6].schema(), other.hasPreEmptionRightRUP);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.urbanismDestination)) {
        this.urbanismDestination = data().deepCopy(fields()[7].schema(), other.urbanismDestination);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hasRankingHeritage)) {
        this.hasRankingHeritage = data().deepCopy(fields()[8].schema(), other.hasRankingHeritage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.hasCobatInfringement)) {
        this.hasCobatInfringement = data().deepCopy(fields()[9].schema(), other.hasCobatInfringement);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isInUnexploitedActivitySite)) {
        this.isInUnexploitedActivitySite = data().deepCopy(fields()[10].schema(), other.isInUnexploitedActivitySite);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.isIncludedInExpropriationPlan)) {
        this.isIncludedInExpropriationPlan = data().deepCopy(fields()[11].schema(), other.isIncludedInExpropriationPlan);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isInPreEmptionRightArea)) {
        this.isInPreEmptionRightArea = data().deepCopy(fields()[12].schema(), other.isInPreEmptionRightArea);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.landUseType)) {
        this.landUseType = data().deepCopy(fields()[13].schema(), other.landUseType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.urbanismDestinationType)) {
        this.urbanismDestinationType = data().deepCopy(fields()[14].schema(), other.urbanismDestinationType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.hasSubpoenaForUrbanismInfringement)) {
        this.hasSubpoenaForUrbanismInfringement = data().deepCopy(fields()[15].schema(), other.hasSubpoenaForUrbanismInfringement);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.isGroupedPlanningPermitGranted)) {
        this.isGroupedPlanningPermitGranted = data().deepCopy(fields()[16].schema(), other.isGroupedPlanningPermitGranted);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.hasAlignmentPlan)) {
        this.hasAlignmentPlan = data().deepCopy(fields()[17].schema(), other.hasAlignmentPlan);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.cobatInfringementDate)) {
        this.cobatInfringementDate = data().deepCopy(fields()[18].schema(), other.cobatInfringementDate);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.cobatInfringementObject)) {
        this.cobatInfringementObject = data().deepCopy(fields()[19].schema(), other.cobatInfringementObject);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.cobatInfringementConsequences)) {
        this.cobatInfringementConsequences = data().deepCopy(fields()[20].schema(), other.cobatInfringementConsequences);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.hasRentalProhibition)) {
        this.hasRentalProhibition = data().deepCopy(fields()[21].schema(), other.hasRentalProhibition);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.urbanismPermits)) {
        this.urbanismPermits = data().deepCopy(fields()[22].schema(), other.urbanismPermits);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.planningPermitNumber)) {
        this.planningPermitNumber = data().deepCopy(fields()[23].schema(), other.planningPermitNumber);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.planningPermitDate)) {
        this.planningPermitDate = data().deepCopy(fields()[24].schema(), other.planningPermitDate);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.expropriationDate)) {
        this.expropriationDate = data().deepCopy(fields()[25].schema(), other.expropriationDate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.preEmptionRightAreaDate)) {
        this.preEmptionRightAreaDate = data().deepCopy(fields()[26].schema(), other.preEmptionRightAreaDate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.hasPreEmptionRight)) {
        this.hasPreEmptionRight = data().deepCopy(fields()[27].schema(), other.hasPreEmptionRight);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.isAuthorizationSale)) {
        this.isAuthorizationSale = data().deepCopy(fields()[28].schema(), other.isAuthorizationSale);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.isNatura2000Zone)) {
        this.isNatura2000Zone = data().deepCopy(fields()[29].schema(), other.isNatura2000Zone);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.permitNumber)) {
        this.permitNumber = data().deepCopy(fields()[30].schema(), other.permitNumber);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.permitDate)) {
        this.permitDate = data().deepCopy(fields()[31].schema(), other.permitDate);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.infoRequestedAndWaitingPeriodDone)) {
        this.infoRequestedAndWaitingPeriodDone = data().deepCopy(fields()[32].schema(), other.infoRequestedAndWaitingPeriodDone);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.infoRequestedReceptionDate)) {
        this.infoRequestedReceptionDate = data().deepCopy(fields()[33].schema(), other.infoRequestedReceptionDate);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.groupedPlanningPermitNumber)) {
        this.groupedPlanningPermitNumber = data().deepCopy(fields()[34].schema(), other.groupedPlanningPermitNumber);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.groupedPlanningPermitDate)) {
        this.groupedPlanningPermitDate = data().deepCopy(fields()[35].schema(), other.groupedPlanningPermitDate);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.preEmptionRightDetails)) {
        this.preEmptionRightDetails = data().deepCopy(fields()[36].schema(), other.preEmptionRightDetails);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.authorizationSaleDetails)) {
        this.authorizationSaleDetails = data().deepCopy(fields()[37].schema(), other.authorizationSaleDetails);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.hasAsBuiltAttestation)) {
        this.hasAsBuiltAttestation = data().deepCopy(fields()[38].schema(), other.hasAsBuiltAttestation);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.projectConditions)) {
        this.projectConditions = data().deepCopy(fields()[39].schema(), other.projectConditions);
        fieldSetFlags()[39] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Urbanism instance
     * @param other The existing instance to copy.
     */
    private Builder(avro_generated_types.root_view_entity.property.Urbanism other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.takeResponsibilityForMissingMandatoryUrbanisticInformation)) {
        this.takeResponsibilityForMissingMandatoryUrbanisticInformation = data().deepCopy(fields()[0].schema(), other.takeResponsibilityForMissingMandatoryUrbanisticInformation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.urbanismDestinationRF)) {
        this.urbanismDestinationRF = data().deepCopy(fields()[1].schema(), other.urbanismDestinationRF);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.floodZoneType)) {
        this.floodZoneType = data().deepCopy(fields()[2].schema(), other.floodZoneType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hasSubpoenaAccordingToArticles)) {
        this.hasSubpoenaAccordingToArticles = data().deepCopy(fields()[3].schema(), other.hasSubpoenaAccordingToArticles);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isPlanningPermitGranted)) {
        this.isPlanningPermitGranted = data().deepCopy(fields()[4].schema(), other.isPlanningPermitGranted);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isSubdivisionPermitGranted)) {
        this.isSubdivisionPermitGranted = data().deepCopy(fields()[5].schema(), other.isSubdivisionPermitGranted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hasPreEmptionRightRUP)) {
        this.hasPreEmptionRightRUP = data().deepCopy(fields()[6].schema(), other.hasPreEmptionRightRUP);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.urbanismDestination)) {
        this.urbanismDestination = data().deepCopy(fields()[7].schema(), other.urbanismDestination);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hasRankingHeritage)) {
        this.hasRankingHeritage = data().deepCopy(fields()[8].schema(), other.hasRankingHeritage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.hasCobatInfringement)) {
        this.hasCobatInfringement = data().deepCopy(fields()[9].schema(), other.hasCobatInfringement);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isInUnexploitedActivitySite)) {
        this.isInUnexploitedActivitySite = data().deepCopy(fields()[10].schema(), other.isInUnexploitedActivitySite);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.isIncludedInExpropriationPlan)) {
        this.isIncludedInExpropriationPlan = data().deepCopy(fields()[11].schema(), other.isIncludedInExpropriationPlan);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isInPreEmptionRightArea)) {
        this.isInPreEmptionRightArea = data().deepCopy(fields()[12].schema(), other.isInPreEmptionRightArea);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.landUseType)) {
        this.landUseType = data().deepCopy(fields()[13].schema(), other.landUseType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.urbanismDestinationType)) {
        this.urbanismDestinationType = data().deepCopy(fields()[14].schema(), other.urbanismDestinationType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.hasSubpoenaForUrbanismInfringement)) {
        this.hasSubpoenaForUrbanismInfringement = data().deepCopy(fields()[15].schema(), other.hasSubpoenaForUrbanismInfringement);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.isGroupedPlanningPermitGranted)) {
        this.isGroupedPlanningPermitGranted = data().deepCopy(fields()[16].schema(), other.isGroupedPlanningPermitGranted);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.hasAlignmentPlan)) {
        this.hasAlignmentPlan = data().deepCopy(fields()[17].schema(), other.hasAlignmentPlan);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.cobatInfringementDate)) {
        this.cobatInfringementDate = data().deepCopy(fields()[18].schema(), other.cobatInfringementDate);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.cobatInfringementObject)) {
        this.cobatInfringementObject = data().deepCopy(fields()[19].schema(), other.cobatInfringementObject);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.cobatInfringementConsequences)) {
        this.cobatInfringementConsequences = data().deepCopy(fields()[20].schema(), other.cobatInfringementConsequences);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.hasRentalProhibition)) {
        this.hasRentalProhibition = data().deepCopy(fields()[21].schema(), other.hasRentalProhibition);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.urbanismPermits)) {
        this.urbanismPermits = data().deepCopy(fields()[22].schema(), other.urbanismPermits);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.planningPermitNumber)) {
        this.planningPermitNumber = data().deepCopy(fields()[23].schema(), other.planningPermitNumber);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.planningPermitDate)) {
        this.planningPermitDate = data().deepCopy(fields()[24].schema(), other.planningPermitDate);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.expropriationDate)) {
        this.expropriationDate = data().deepCopy(fields()[25].schema(), other.expropriationDate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.preEmptionRightAreaDate)) {
        this.preEmptionRightAreaDate = data().deepCopy(fields()[26].schema(), other.preEmptionRightAreaDate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.hasPreEmptionRight)) {
        this.hasPreEmptionRight = data().deepCopy(fields()[27].schema(), other.hasPreEmptionRight);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.isAuthorizationSale)) {
        this.isAuthorizationSale = data().deepCopy(fields()[28].schema(), other.isAuthorizationSale);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.isNatura2000Zone)) {
        this.isNatura2000Zone = data().deepCopy(fields()[29].schema(), other.isNatura2000Zone);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.permitNumber)) {
        this.permitNumber = data().deepCopy(fields()[30].schema(), other.permitNumber);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.permitDate)) {
        this.permitDate = data().deepCopy(fields()[31].schema(), other.permitDate);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.infoRequestedAndWaitingPeriodDone)) {
        this.infoRequestedAndWaitingPeriodDone = data().deepCopy(fields()[32].schema(), other.infoRequestedAndWaitingPeriodDone);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.infoRequestedReceptionDate)) {
        this.infoRequestedReceptionDate = data().deepCopy(fields()[33].schema(), other.infoRequestedReceptionDate);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.groupedPlanningPermitNumber)) {
        this.groupedPlanningPermitNumber = data().deepCopy(fields()[34].schema(), other.groupedPlanningPermitNumber);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.groupedPlanningPermitDate)) {
        this.groupedPlanningPermitDate = data().deepCopy(fields()[35].schema(), other.groupedPlanningPermitDate);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.preEmptionRightDetails)) {
        this.preEmptionRightDetails = data().deepCopy(fields()[36].schema(), other.preEmptionRightDetails);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.authorizationSaleDetails)) {
        this.authorizationSaleDetails = data().deepCopy(fields()[37].schema(), other.authorizationSaleDetails);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.hasAsBuiltAttestation)) {
        this.hasAsBuiltAttestation = data().deepCopy(fields()[38].schema(), other.hasAsBuiltAttestation);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.projectConditions)) {
        this.projectConditions = data().deepCopy(fields()[39].schema(), other.projectConditions);
        fieldSetFlags()[39] = true;
      }
    }

    /**
      * Gets the value of the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field.
      * @return The value.
      */
    public java.lang.Boolean getTakeResponsibilityForMissingMandatoryUrbanisticInformation() {
      return takeResponsibilityForMissingMandatoryUrbanisticInformation;
    }

    /**
      * Sets the value of the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field.
      * @param value The value of 'takeResponsibilityForMissingMandatoryUrbanisticInformation'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setTakeResponsibilityForMissingMandatoryUrbanisticInformation(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.takeResponsibilityForMissingMandatoryUrbanisticInformation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field has been set.
      * @return True if the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field has been set, false otherwise.
      */
    public boolean hasTakeResponsibilityForMissingMandatoryUrbanisticInformation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'takeResponsibilityForMissingMandatoryUrbanisticInformation' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearTakeResponsibilityForMissingMandatoryUrbanisticInformation() {
      takeResponsibilityForMissingMandatoryUrbanisticInformation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'urbanismDestinationRF' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrbanismDestinationRF() {
      return urbanismDestinationRF;
    }

    /**
      * Sets the value of the 'urbanismDestinationRF' field.
      * @param value The value of 'urbanismDestinationRF'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setUrbanismDestinationRF(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.urbanismDestinationRF = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'urbanismDestinationRF' field has been set.
      * @return True if the 'urbanismDestinationRF' field has been set, false otherwise.
      */
    public boolean hasUrbanismDestinationRF() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'urbanismDestinationRF' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearUrbanismDestinationRF() {
      urbanismDestinationRF = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'floodZoneType' field.
      * @return The value.
      */
    public java.lang.CharSequence getFloodZoneType() {
      return floodZoneType;
    }

    /**
      * Sets the value of the 'floodZoneType' field.
      * @param value The value of 'floodZoneType'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setFloodZoneType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.floodZoneType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'floodZoneType' field has been set.
      * @return True if the 'floodZoneType' field has been set, false otherwise.
      */
    public boolean hasFloodZoneType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'floodZoneType' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearFloodZoneType() {
      floodZoneType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasSubpoenaAccordingToArticles' field.
      * @return The value.
      */
    public java.lang.Boolean getHasSubpoenaAccordingToArticles() {
      return hasSubpoenaAccordingToArticles;
    }

    /**
      * Sets the value of the 'hasSubpoenaAccordingToArticles' field.
      * @param value The value of 'hasSubpoenaAccordingToArticles'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasSubpoenaAccordingToArticles(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.hasSubpoenaAccordingToArticles = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hasSubpoenaAccordingToArticles' field has been set.
      * @return True if the 'hasSubpoenaAccordingToArticles' field has been set, false otherwise.
      */
    public boolean hasHasSubpoenaAccordingToArticles() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hasSubpoenaAccordingToArticles' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasSubpoenaAccordingToArticles() {
      hasSubpoenaAccordingToArticles = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPlanningPermitGranted' field.
      * @return The value.
      */
    public java.lang.Boolean getIsPlanningPermitGranted() {
      return isPlanningPermitGranted;
    }

    /**
      * Sets the value of the 'isPlanningPermitGranted' field.
      * @param value The value of 'isPlanningPermitGranted'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsPlanningPermitGranted(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.isPlanningPermitGranted = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isPlanningPermitGranted' field has been set.
      * @return True if the 'isPlanningPermitGranted' field has been set, false otherwise.
      */
    public boolean hasIsPlanningPermitGranted() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isPlanningPermitGranted' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsPlanningPermitGranted() {
      isPlanningPermitGranted = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSubdivisionPermitGranted' field.
      * @return The value.
      */
    public java.lang.Boolean getIsSubdivisionPermitGranted() {
      return isSubdivisionPermitGranted;
    }

    /**
      * Sets the value of the 'isSubdivisionPermitGranted' field.
      * @param value The value of 'isSubdivisionPermitGranted'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsSubdivisionPermitGranted(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.isSubdivisionPermitGranted = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isSubdivisionPermitGranted' field has been set.
      * @return True if the 'isSubdivisionPermitGranted' field has been set, false otherwise.
      */
    public boolean hasIsSubdivisionPermitGranted() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isSubdivisionPermitGranted' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsSubdivisionPermitGranted() {
      isSubdivisionPermitGranted = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasPreEmptionRightRUP' field.
      * @return The value.
      */
    public java.lang.Boolean getHasPreEmptionRightRUP() {
      return hasPreEmptionRightRUP;
    }

    /**
      * Sets the value of the 'hasPreEmptionRightRUP' field.
      * @param value The value of 'hasPreEmptionRightRUP'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasPreEmptionRightRUP(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.hasPreEmptionRightRUP = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hasPreEmptionRightRUP' field has been set.
      * @return True if the 'hasPreEmptionRightRUP' field has been set, false otherwise.
      */
    public boolean hasHasPreEmptionRightRUP() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hasPreEmptionRightRUP' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasPreEmptionRightRUP() {
      hasPreEmptionRightRUP = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'urbanismDestination' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrbanismDestination() {
      return urbanismDestination;
    }

    /**
      * Sets the value of the 'urbanismDestination' field.
      * @param value The value of 'urbanismDestination'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setUrbanismDestination(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.urbanismDestination = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'urbanismDestination' field has been set.
      * @return True if the 'urbanismDestination' field has been set, false otherwise.
      */
    public boolean hasUrbanismDestination() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'urbanismDestination' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearUrbanismDestination() {
      urbanismDestination = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasRankingHeritage' field.
      * @return The value.
      */
    public java.lang.Boolean getHasRankingHeritage() {
      return hasRankingHeritage;
    }

    /**
      * Sets the value of the 'hasRankingHeritage' field.
      * @param value The value of 'hasRankingHeritage'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasRankingHeritage(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.hasRankingHeritage = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'hasRankingHeritage' field has been set.
      * @return True if the 'hasRankingHeritage' field has been set, false otherwise.
      */
    public boolean hasHasRankingHeritage() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'hasRankingHeritage' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasRankingHeritage() {
      hasRankingHeritage = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasCobatInfringement' field.
      * @return The value.
      */
    public java.lang.Boolean getHasCobatInfringement() {
      return hasCobatInfringement;
    }

    /**
      * Sets the value of the 'hasCobatInfringement' field.
      * @param value The value of 'hasCobatInfringement'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasCobatInfringement(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.hasCobatInfringement = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'hasCobatInfringement' field has been set.
      * @return True if the 'hasCobatInfringement' field has been set, false otherwise.
      */
    public boolean hasHasCobatInfringement() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'hasCobatInfringement' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasCobatInfringement() {
      hasCobatInfringement = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isInUnexploitedActivitySite' field.
      * @return The value.
      */
    public java.lang.Boolean getIsInUnexploitedActivitySite() {
      return isInUnexploitedActivitySite;
    }

    /**
      * Sets the value of the 'isInUnexploitedActivitySite' field.
      * @param value The value of 'isInUnexploitedActivitySite'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsInUnexploitedActivitySite(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.isInUnexploitedActivitySite = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isInUnexploitedActivitySite' field has been set.
      * @return True if the 'isInUnexploitedActivitySite' field has been set, false otherwise.
      */
    public boolean hasIsInUnexploitedActivitySite() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isInUnexploitedActivitySite' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsInUnexploitedActivitySite() {
      isInUnexploitedActivitySite = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'isIncludedInExpropriationPlan' field.
      * @return The value.
      */
    public java.lang.Boolean getIsIncludedInExpropriationPlan() {
      return isIncludedInExpropriationPlan;
    }

    /**
      * Sets the value of the 'isIncludedInExpropriationPlan' field.
      * @param value The value of 'isIncludedInExpropriationPlan'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsIncludedInExpropriationPlan(java.lang.Boolean value) {
      validate(fields()[11], value);
      this.isIncludedInExpropriationPlan = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'isIncludedInExpropriationPlan' field has been set.
      * @return True if the 'isIncludedInExpropriationPlan' field has been set, false otherwise.
      */
    public boolean hasIsIncludedInExpropriationPlan() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'isIncludedInExpropriationPlan' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsIncludedInExpropriationPlan() {
      isIncludedInExpropriationPlan = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'isInPreEmptionRightArea' field.
      * @return The value.
      */
    public java.lang.Boolean getIsInPreEmptionRightArea() {
      return isInPreEmptionRightArea;
    }

    /**
      * Sets the value of the 'isInPreEmptionRightArea' field.
      * @param value The value of 'isInPreEmptionRightArea'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsInPreEmptionRightArea(java.lang.Boolean value) {
      validate(fields()[12], value);
      this.isInPreEmptionRightArea = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'isInPreEmptionRightArea' field has been set.
      * @return True if the 'isInPreEmptionRightArea' field has been set, false otherwise.
      */
    public boolean hasIsInPreEmptionRightArea() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'isInPreEmptionRightArea' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsInPreEmptionRightArea() {
      isInPreEmptionRightArea = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'landUseType' field.
      * @return The value.
      */
    public java.lang.CharSequence getLandUseType() {
      return landUseType;
    }

    /**
      * Sets the value of the 'landUseType' field.
      * @param value The value of 'landUseType'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setLandUseType(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.landUseType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'landUseType' field has been set.
      * @return True if the 'landUseType' field has been set, false otherwise.
      */
    public boolean hasLandUseType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'landUseType' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearLandUseType() {
      landUseType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'urbanismDestinationType' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrbanismDestinationType() {
      return urbanismDestinationType;
    }

    /**
      * Sets the value of the 'urbanismDestinationType' field.
      * @param value The value of 'urbanismDestinationType'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setUrbanismDestinationType(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.urbanismDestinationType = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'urbanismDestinationType' field has been set.
      * @return True if the 'urbanismDestinationType' field has been set, false otherwise.
      */
    public boolean hasUrbanismDestinationType() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'urbanismDestinationType' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearUrbanismDestinationType() {
      urbanismDestinationType = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasSubpoenaForUrbanismInfringement' field.
      * @return The value.
      */
    public java.lang.Boolean getHasSubpoenaForUrbanismInfringement() {
      return hasSubpoenaForUrbanismInfringement;
    }

    /**
      * Sets the value of the 'hasSubpoenaForUrbanismInfringement' field.
      * @param value The value of 'hasSubpoenaForUrbanismInfringement'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasSubpoenaForUrbanismInfringement(java.lang.Boolean value) {
      validate(fields()[15], value);
      this.hasSubpoenaForUrbanismInfringement = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'hasSubpoenaForUrbanismInfringement' field has been set.
      * @return True if the 'hasSubpoenaForUrbanismInfringement' field has been set, false otherwise.
      */
    public boolean hasHasSubpoenaForUrbanismInfringement() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'hasSubpoenaForUrbanismInfringement' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasSubpoenaForUrbanismInfringement() {
      hasSubpoenaForUrbanismInfringement = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'isGroupedPlanningPermitGranted' field.
      * @return The value.
      */
    public java.lang.Boolean getIsGroupedPlanningPermitGranted() {
      return isGroupedPlanningPermitGranted;
    }

    /**
      * Sets the value of the 'isGroupedPlanningPermitGranted' field.
      * @param value The value of 'isGroupedPlanningPermitGranted'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsGroupedPlanningPermitGranted(java.lang.Boolean value) {
      validate(fields()[16], value);
      this.isGroupedPlanningPermitGranted = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'isGroupedPlanningPermitGranted' field has been set.
      * @return True if the 'isGroupedPlanningPermitGranted' field has been set, false otherwise.
      */
    public boolean hasIsGroupedPlanningPermitGranted() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'isGroupedPlanningPermitGranted' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsGroupedPlanningPermitGranted() {
      isGroupedPlanningPermitGranted = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasAlignmentPlan' field.
      * @return The value.
      */
    public java.lang.Boolean getHasAlignmentPlan() {
      return hasAlignmentPlan;
    }

    /**
      * Sets the value of the 'hasAlignmentPlan' field.
      * @param value The value of 'hasAlignmentPlan'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasAlignmentPlan(java.lang.Boolean value) {
      validate(fields()[17], value);
      this.hasAlignmentPlan = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'hasAlignmentPlan' field has been set.
      * @return True if the 'hasAlignmentPlan' field has been set, false otherwise.
      */
    public boolean hasHasAlignmentPlan() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'hasAlignmentPlan' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasAlignmentPlan() {
      hasAlignmentPlan = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'cobatInfringementDate' field.
      * @return The value.
      */
    public java.lang.Long getCobatInfringementDate() {
      return cobatInfringementDate;
    }

    /**
      * Sets the value of the 'cobatInfringementDate' field.
      * @param value The value of 'cobatInfringementDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setCobatInfringementDate(java.lang.Long value) {
      validate(fields()[18], value);
      this.cobatInfringementDate = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'cobatInfringementDate' field has been set.
      * @return True if the 'cobatInfringementDate' field has been set, false otherwise.
      */
    public boolean hasCobatInfringementDate() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'cobatInfringementDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearCobatInfringementDate() {
      cobatInfringementDate = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'cobatInfringementObject' field.
      * @return The value.
      */
    public java.lang.CharSequence getCobatInfringementObject() {
      return cobatInfringementObject;
    }

    /**
      * Sets the value of the 'cobatInfringementObject' field.
      * @param value The value of 'cobatInfringementObject'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setCobatInfringementObject(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.cobatInfringementObject = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'cobatInfringementObject' field has been set.
      * @return True if the 'cobatInfringementObject' field has been set, false otherwise.
      */
    public boolean hasCobatInfringementObject() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'cobatInfringementObject' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearCobatInfringementObject() {
      cobatInfringementObject = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'cobatInfringementConsequences' field.
      * @return The value.
      */
    public java.lang.CharSequence getCobatInfringementConsequences() {
      return cobatInfringementConsequences;
    }

    /**
      * Sets the value of the 'cobatInfringementConsequences' field.
      * @param value The value of 'cobatInfringementConsequences'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setCobatInfringementConsequences(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.cobatInfringementConsequences = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'cobatInfringementConsequences' field has been set.
      * @return True if the 'cobatInfringementConsequences' field has been set, false otherwise.
      */
    public boolean hasCobatInfringementConsequences() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'cobatInfringementConsequences' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearCobatInfringementConsequences() {
      cobatInfringementConsequences = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasRentalProhibition' field.
      * @return The value.
      */
    public java.lang.Boolean getHasRentalProhibition() {
      return hasRentalProhibition;
    }

    /**
      * Sets the value of the 'hasRentalProhibition' field.
      * @param value The value of 'hasRentalProhibition'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasRentalProhibition(java.lang.Boolean value) {
      validate(fields()[21], value);
      this.hasRentalProhibition = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'hasRentalProhibition' field has been set.
      * @return True if the 'hasRentalProhibition' field has been set, false otherwise.
      */
    public boolean hasHasRentalProhibition() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'hasRentalProhibition' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasRentalProhibition() {
      hasRentalProhibition = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'urbanismPermits' field.
      * @return The value.
      */
    public java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> getUrbanismPermits() {
      return urbanismPermits;
    }

    /**
      * Sets the value of the 'urbanismPermits' field.
      * @param value The value of 'urbanismPermits'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setUrbanismPermits(java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits> value) {
      validate(fields()[22], value);
      this.urbanismPermits = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'urbanismPermits' field has been set.
      * @return True if the 'urbanismPermits' field has been set, false otherwise.
      */
    public boolean hasUrbanismPermits() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'urbanismPermits' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearUrbanismPermits() {
      urbanismPermits = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'planningPermitNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanningPermitNumber() {
      return planningPermitNumber;
    }

    /**
      * Sets the value of the 'planningPermitNumber' field.
      * @param value The value of 'planningPermitNumber'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setPlanningPermitNumber(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.planningPermitNumber = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'planningPermitNumber' field has been set.
      * @return True if the 'planningPermitNumber' field has been set, false otherwise.
      */
    public boolean hasPlanningPermitNumber() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'planningPermitNumber' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearPlanningPermitNumber() {
      planningPermitNumber = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'planningPermitDate' field.
      * @return The value.
      */
    public java.lang.Long getPlanningPermitDate() {
      return planningPermitDate;
    }

    /**
      * Sets the value of the 'planningPermitDate' field.
      * @param value The value of 'planningPermitDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setPlanningPermitDate(java.lang.Long value) {
      validate(fields()[24], value);
      this.planningPermitDate = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'planningPermitDate' field has been set.
      * @return True if the 'planningPermitDate' field has been set, false otherwise.
      */
    public boolean hasPlanningPermitDate() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'planningPermitDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearPlanningPermitDate() {
      planningPermitDate = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'expropriationDate' field.
      * @return The value.
      */
    public java.lang.Long getExpropriationDate() {
      return expropriationDate;
    }

    /**
      * Sets the value of the 'expropriationDate' field.
      * @param value The value of 'expropriationDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setExpropriationDate(java.lang.Long value) {
      validate(fields()[25], value);
      this.expropriationDate = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'expropriationDate' field has been set.
      * @return True if the 'expropriationDate' field has been set, false otherwise.
      */
    public boolean hasExpropriationDate() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'expropriationDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearExpropriationDate() {
      expropriationDate = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'preEmptionRightAreaDate' field.
      * @return The value.
      */
    public java.lang.Long getPreEmptionRightAreaDate() {
      return preEmptionRightAreaDate;
    }

    /**
      * Sets the value of the 'preEmptionRightAreaDate' field.
      * @param value The value of 'preEmptionRightAreaDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setPreEmptionRightAreaDate(java.lang.Long value) {
      validate(fields()[26], value);
      this.preEmptionRightAreaDate = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'preEmptionRightAreaDate' field has been set.
      * @return True if the 'preEmptionRightAreaDate' field has been set, false otherwise.
      */
    public boolean hasPreEmptionRightAreaDate() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'preEmptionRightAreaDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearPreEmptionRightAreaDate() {
      preEmptionRightAreaDate = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasPreEmptionRight' field.
      * @return The value.
      */
    public java.lang.Boolean getHasPreEmptionRight() {
      return hasPreEmptionRight;
    }

    /**
      * Sets the value of the 'hasPreEmptionRight' field.
      * @param value The value of 'hasPreEmptionRight'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasPreEmptionRight(java.lang.Boolean value) {
      validate(fields()[27], value);
      this.hasPreEmptionRight = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'hasPreEmptionRight' field has been set.
      * @return True if the 'hasPreEmptionRight' field has been set, false otherwise.
      */
    public boolean hasHasPreEmptionRight() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'hasPreEmptionRight' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasPreEmptionRight() {
      hasPreEmptionRight = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'isAuthorizationSale' field.
      * @return The value.
      */
    public java.lang.Boolean getIsAuthorizationSale() {
      return isAuthorizationSale;
    }

    /**
      * Sets the value of the 'isAuthorizationSale' field.
      * @param value The value of 'isAuthorizationSale'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsAuthorizationSale(java.lang.Boolean value) {
      validate(fields()[28], value);
      this.isAuthorizationSale = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'isAuthorizationSale' field has been set.
      * @return True if the 'isAuthorizationSale' field has been set, false otherwise.
      */
    public boolean hasIsAuthorizationSale() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'isAuthorizationSale' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsAuthorizationSale() {
      isAuthorizationSale = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'isNatura2000Zone' field.
      * @return The value.
      */
    public java.lang.Boolean getIsNatura2000Zone() {
      return isNatura2000Zone;
    }

    /**
      * Sets the value of the 'isNatura2000Zone' field.
      * @param value The value of 'isNatura2000Zone'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setIsNatura2000Zone(java.lang.Boolean value) {
      validate(fields()[29], value);
      this.isNatura2000Zone = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'isNatura2000Zone' field has been set.
      * @return True if the 'isNatura2000Zone' field has been set, false otherwise.
      */
    public boolean hasIsNatura2000Zone() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'isNatura2000Zone' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearIsNatura2000Zone() {
      isNatura2000Zone = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'permitNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPermitNumber() {
      return permitNumber;
    }

    /**
      * Sets the value of the 'permitNumber' field.
      * @param value The value of 'permitNumber'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setPermitNumber(java.lang.CharSequence value) {
      validate(fields()[30], value);
      this.permitNumber = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'permitNumber' field has been set.
      * @return True if the 'permitNumber' field has been set, false otherwise.
      */
    public boolean hasPermitNumber() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'permitNumber' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearPermitNumber() {
      permitNumber = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'permitDate' field.
      * @return The value.
      */
    public java.lang.Long getPermitDate() {
      return permitDate;
    }

    /**
      * Sets the value of the 'permitDate' field.
      * @param value The value of 'permitDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setPermitDate(java.lang.Long value) {
      validate(fields()[31], value);
      this.permitDate = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'permitDate' field has been set.
      * @return True if the 'permitDate' field has been set, false otherwise.
      */
    public boolean hasPermitDate() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'permitDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearPermitDate() {
      permitDate = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'infoRequestedAndWaitingPeriodDone' field.
      * @return The value.
      */
    public java.lang.Boolean getInfoRequestedAndWaitingPeriodDone() {
      return infoRequestedAndWaitingPeriodDone;
    }

    /**
      * Sets the value of the 'infoRequestedAndWaitingPeriodDone' field.
      * @param value The value of 'infoRequestedAndWaitingPeriodDone'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setInfoRequestedAndWaitingPeriodDone(java.lang.Boolean value) {
      validate(fields()[32], value);
      this.infoRequestedAndWaitingPeriodDone = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'infoRequestedAndWaitingPeriodDone' field has been set.
      * @return True if the 'infoRequestedAndWaitingPeriodDone' field has been set, false otherwise.
      */
    public boolean hasInfoRequestedAndWaitingPeriodDone() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'infoRequestedAndWaitingPeriodDone' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearInfoRequestedAndWaitingPeriodDone() {
      infoRequestedAndWaitingPeriodDone = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'infoRequestedReceptionDate' field.
      * @return The value.
      */
    public java.lang.Long getInfoRequestedReceptionDate() {
      return infoRequestedReceptionDate;
    }

    /**
      * Sets the value of the 'infoRequestedReceptionDate' field.
      * @param value The value of 'infoRequestedReceptionDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setInfoRequestedReceptionDate(java.lang.Long value) {
      validate(fields()[33], value);
      this.infoRequestedReceptionDate = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'infoRequestedReceptionDate' field has been set.
      * @return True if the 'infoRequestedReceptionDate' field has been set, false otherwise.
      */
    public boolean hasInfoRequestedReceptionDate() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'infoRequestedReceptionDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearInfoRequestedReceptionDate() {
      infoRequestedReceptionDate = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupedPlanningPermitNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getGroupedPlanningPermitNumber() {
      return groupedPlanningPermitNumber;
    }

    /**
      * Sets the value of the 'groupedPlanningPermitNumber' field.
      * @param value The value of 'groupedPlanningPermitNumber'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setGroupedPlanningPermitNumber(java.lang.CharSequence value) {
      validate(fields()[34], value);
      this.groupedPlanningPermitNumber = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'groupedPlanningPermitNumber' field has been set.
      * @return True if the 'groupedPlanningPermitNumber' field has been set, false otherwise.
      */
    public boolean hasGroupedPlanningPermitNumber() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'groupedPlanningPermitNumber' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearGroupedPlanningPermitNumber() {
      groupedPlanningPermitNumber = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupedPlanningPermitDate' field.
      * @return The value.
      */
    public java.lang.Long getGroupedPlanningPermitDate() {
      return groupedPlanningPermitDate;
    }

    /**
      * Sets the value of the 'groupedPlanningPermitDate' field.
      * @param value The value of 'groupedPlanningPermitDate'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setGroupedPlanningPermitDate(java.lang.Long value) {
      validate(fields()[35], value);
      this.groupedPlanningPermitDate = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'groupedPlanningPermitDate' field has been set.
      * @return True if the 'groupedPlanningPermitDate' field has been set, false otherwise.
      */
    public boolean hasGroupedPlanningPermitDate() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'groupedPlanningPermitDate' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearGroupedPlanningPermitDate() {
      groupedPlanningPermitDate = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'preEmptionRightDetails' field.
      * @return The value.
      */
    public java.lang.CharSequence getPreEmptionRightDetails() {
      return preEmptionRightDetails;
    }

    /**
      * Sets the value of the 'preEmptionRightDetails' field.
      * @param value The value of 'preEmptionRightDetails'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setPreEmptionRightDetails(java.lang.CharSequence value) {
      validate(fields()[36], value);
      this.preEmptionRightDetails = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'preEmptionRightDetails' field has been set.
      * @return True if the 'preEmptionRightDetails' field has been set, false otherwise.
      */
    public boolean hasPreEmptionRightDetails() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'preEmptionRightDetails' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearPreEmptionRightDetails() {
      preEmptionRightDetails = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'authorizationSaleDetails' field.
      * @return The value.
      */
    public java.lang.CharSequence getAuthorizationSaleDetails() {
      return authorizationSaleDetails;
    }

    /**
      * Sets the value of the 'authorizationSaleDetails' field.
      * @param value The value of 'authorizationSaleDetails'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setAuthorizationSaleDetails(java.lang.CharSequence value) {
      validate(fields()[37], value);
      this.authorizationSaleDetails = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationSaleDetails' field has been set.
      * @return True if the 'authorizationSaleDetails' field has been set, false otherwise.
      */
    public boolean hasAuthorizationSaleDetails() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'authorizationSaleDetails' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearAuthorizationSaleDetails() {
      authorizationSaleDetails = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasAsBuiltAttestation' field.
      * @return The value.
      */
    public java.lang.Boolean getHasAsBuiltAttestation() {
      return hasAsBuiltAttestation;
    }

    /**
      * Sets the value of the 'hasAsBuiltAttestation' field.
      * @param value The value of 'hasAsBuiltAttestation'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setHasAsBuiltAttestation(java.lang.Boolean value) {
      validate(fields()[38], value);
      this.hasAsBuiltAttestation = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'hasAsBuiltAttestation' field has been set.
      * @return True if the 'hasAsBuiltAttestation' field has been set, false otherwise.
      */
    public boolean hasHasAsBuiltAttestation() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'hasAsBuiltAttestation' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearHasAsBuiltAttestation() {
      hasAsBuiltAttestation = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectConditions' field.
      * @return The value.
      */
    public java.lang.CharSequence getProjectConditions() {
      return projectConditions;
    }

    /**
      * Sets the value of the 'projectConditions' field.
      * @param value The value of 'projectConditions'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder setProjectConditions(java.lang.CharSequence value) {
      validate(fields()[39], value);
      this.projectConditions = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'projectConditions' field has been set.
      * @return True if the 'projectConditions' field has been set, false otherwise.
      */
    public boolean hasProjectConditions() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'projectConditions' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Urbanism.Builder clearProjectConditions() {
      projectConditions = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    @Override
    public Urbanism build() {
      try {
        Urbanism record = new Urbanism();
        record.takeResponsibilityForMissingMandatoryUrbanisticInformation = fieldSetFlags()[0] ? this.takeResponsibilityForMissingMandatoryUrbanisticInformation : (java.lang.Boolean) defaultValue(fields()[0]);
        record.urbanismDestinationRF = fieldSetFlags()[1] ? this.urbanismDestinationRF : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.floodZoneType = fieldSetFlags()[2] ? this.floodZoneType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.hasSubpoenaAccordingToArticles = fieldSetFlags()[3] ? this.hasSubpoenaAccordingToArticles : (java.lang.Boolean) defaultValue(fields()[3]);
        record.isPlanningPermitGranted = fieldSetFlags()[4] ? this.isPlanningPermitGranted : (java.lang.Boolean) defaultValue(fields()[4]);
        record.isSubdivisionPermitGranted = fieldSetFlags()[5] ? this.isSubdivisionPermitGranted : (java.lang.Boolean) defaultValue(fields()[5]);
        record.hasPreEmptionRightRUP = fieldSetFlags()[6] ? this.hasPreEmptionRightRUP : (java.lang.Boolean) defaultValue(fields()[6]);
        record.urbanismDestination = fieldSetFlags()[7] ? this.urbanismDestination : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.hasRankingHeritage = fieldSetFlags()[8] ? this.hasRankingHeritage : (java.lang.Boolean) defaultValue(fields()[8]);
        record.hasCobatInfringement = fieldSetFlags()[9] ? this.hasCobatInfringement : (java.lang.Boolean) defaultValue(fields()[9]);
        record.isInUnexploitedActivitySite = fieldSetFlags()[10] ? this.isInUnexploitedActivitySite : (java.lang.Boolean) defaultValue(fields()[10]);
        record.isIncludedInExpropriationPlan = fieldSetFlags()[11] ? this.isIncludedInExpropriationPlan : (java.lang.Boolean) defaultValue(fields()[11]);
        record.isInPreEmptionRightArea = fieldSetFlags()[12] ? this.isInPreEmptionRightArea : (java.lang.Boolean) defaultValue(fields()[12]);
        record.landUseType = fieldSetFlags()[13] ? this.landUseType : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.urbanismDestinationType = fieldSetFlags()[14] ? this.urbanismDestinationType : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.hasSubpoenaForUrbanismInfringement = fieldSetFlags()[15] ? this.hasSubpoenaForUrbanismInfringement : (java.lang.Boolean) defaultValue(fields()[15]);
        record.isGroupedPlanningPermitGranted = fieldSetFlags()[16] ? this.isGroupedPlanningPermitGranted : (java.lang.Boolean) defaultValue(fields()[16]);
        record.hasAlignmentPlan = fieldSetFlags()[17] ? this.hasAlignmentPlan : (java.lang.Boolean) defaultValue(fields()[17]);
        record.cobatInfringementDate = fieldSetFlags()[18] ? this.cobatInfringementDate : (java.lang.Long) defaultValue(fields()[18]);
        record.cobatInfringementObject = fieldSetFlags()[19] ? this.cobatInfringementObject : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.cobatInfringementConsequences = fieldSetFlags()[20] ? this.cobatInfringementConsequences : (java.lang.CharSequence) defaultValue(fields()[20]);
        record.hasRentalProhibition = fieldSetFlags()[21] ? this.hasRentalProhibition : (java.lang.Boolean) defaultValue(fields()[21]);
        record.urbanismPermits = fieldSetFlags()[22] ? this.urbanismPermits : (java.util.List<avro_generated_types.root_view_entity.property.urbanism.Urbanismpermits>) defaultValue(fields()[22]);
        record.planningPermitNumber = fieldSetFlags()[23] ? this.planningPermitNumber : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.planningPermitDate = fieldSetFlags()[24] ? this.planningPermitDate : (java.lang.Long) defaultValue(fields()[24]);
        record.expropriationDate = fieldSetFlags()[25] ? this.expropriationDate : (java.lang.Long) defaultValue(fields()[25]);
        record.preEmptionRightAreaDate = fieldSetFlags()[26] ? this.preEmptionRightAreaDate : (java.lang.Long) defaultValue(fields()[26]);
        record.hasPreEmptionRight = fieldSetFlags()[27] ? this.hasPreEmptionRight : (java.lang.Boolean) defaultValue(fields()[27]);
        record.isAuthorizationSale = fieldSetFlags()[28] ? this.isAuthorizationSale : (java.lang.Boolean) defaultValue(fields()[28]);
        record.isNatura2000Zone = fieldSetFlags()[29] ? this.isNatura2000Zone : (java.lang.Boolean) defaultValue(fields()[29]);
        record.permitNumber = fieldSetFlags()[30] ? this.permitNumber : (java.lang.CharSequence) defaultValue(fields()[30]);
        record.permitDate = fieldSetFlags()[31] ? this.permitDate : (java.lang.Long) defaultValue(fields()[31]);
        record.infoRequestedAndWaitingPeriodDone = fieldSetFlags()[32] ? this.infoRequestedAndWaitingPeriodDone : (java.lang.Boolean) defaultValue(fields()[32]);
        record.infoRequestedReceptionDate = fieldSetFlags()[33] ? this.infoRequestedReceptionDate : (java.lang.Long) defaultValue(fields()[33]);
        record.groupedPlanningPermitNumber = fieldSetFlags()[34] ? this.groupedPlanningPermitNumber : (java.lang.CharSequence) defaultValue(fields()[34]);
        record.groupedPlanningPermitDate = fieldSetFlags()[35] ? this.groupedPlanningPermitDate : (java.lang.Long) defaultValue(fields()[35]);
        record.preEmptionRightDetails = fieldSetFlags()[36] ? this.preEmptionRightDetails : (java.lang.CharSequence) defaultValue(fields()[36]);
        record.authorizationSaleDetails = fieldSetFlags()[37] ? this.authorizationSaleDetails : (java.lang.CharSequence) defaultValue(fields()[37]);
        record.hasAsBuiltAttestation = fieldSetFlags()[38] ? this.hasAsBuiltAttestation : (java.lang.Boolean) defaultValue(fields()[38]);
        record.projectConditions = fieldSetFlags()[39] ? this.projectConditions : (java.lang.CharSequence) defaultValue(fields()[39]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
