/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_generated_types.root_view_entity.property;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Energycharacteristic extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8003573755568199042L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Energycharacteristic\",\"namespace\":\"avro_generated_types.root_view_entity.property\",\"fields\":[{\"name\":\"pebScore\",\"type\":[\"null\",\"long\"]},{\"name\":\"energyLabelRW\",\"type\":[\"null\",\"string\"]},{\"name\":\"takeResponsibilityForMissingMandatoryEnergyInformation\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"energyUniqueCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasSolarPanels\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"hasDoubleGlazing\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"energyLabelRBC\",\"type\":[\"null\",\"string\"]},{\"name\":\"energySpecificConsumption\",\"type\":[\"null\",\"long\"]},{\"name\":\"energyTheoreticalConsumption\",\"type\":[\"null\",\"long\"]},{\"name\":\"hasTank\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"hasCentralHeating\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"environmentalPermitType\",\"type\":[\"null\",\"string\"]},{\"name\":\"hasTankTightnessTest\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"electricalConformity\",\"type\":[\"null\",\"string\"]},{\"name\":\"tankDetails\",\"type\":[\"null\",\"string\"]},{\"name\":\"tankCapacity\",\"type\":[\"null\",\"long\"]},{\"name\":\"tankConformity\",\"type\":[\"null\",\"string\"]},{\"name\":\"energyLabelRF\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long pebScore;
  @Deprecated public java.lang.CharSequence energyLabelRW;
  @Deprecated public java.lang.Boolean takeResponsibilityForMissingMandatoryEnergyInformation;
  @Deprecated public java.lang.CharSequence energyUniqueCode;
  @Deprecated public java.lang.Boolean hasSolarPanels;
  @Deprecated public java.lang.Boolean hasDoubleGlazing;
  @Deprecated public java.lang.CharSequence energyLabelRBC;
  @Deprecated public java.lang.Long energySpecificConsumption;
  @Deprecated public java.lang.Long energyTheoreticalConsumption;
  @Deprecated public java.lang.Boolean hasTank;
  @Deprecated public java.lang.Boolean hasCentralHeating;
  @Deprecated public java.lang.CharSequence environmentalPermitType;
  @Deprecated public java.lang.Boolean hasTankTightnessTest;
  @Deprecated public java.lang.CharSequence electricalConformity;
  @Deprecated public java.lang.CharSequence tankDetails;
  @Deprecated public java.lang.Long tankCapacity;
  @Deprecated public java.lang.CharSequence tankConformity;
  @Deprecated public java.lang.CharSequence energyLabelRF;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Energycharacteristic() {}

  /**
   * All-args constructor.
   * @param pebScore The new value for pebScore
   * @param energyLabelRW The new value for energyLabelRW
   * @param takeResponsibilityForMissingMandatoryEnergyInformation The new value for takeResponsibilityForMissingMandatoryEnergyInformation
   * @param energyUniqueCode The new value for energyUniqueCode
   * @param hasSolarPanels The new value for hasSolarPanels
   * @param hasDoubleGlazing The new value for hasDoubleGlazing
   * @param energyLabelRBC The new value for energyLabelRBC
   * @param energySpecificConsumption The new value for energySpecificConsumption
   * @param energyTheoreticalConsumption The new value for energyTheoreticalConsumption
   * @param hasTank The new value for hasTank
   * @param hasCentralHeating The new value for hasCentralHeating
   * @param environmentalPermitType The new value for environmentalPermitType
   * @param hasTankTightnessTest The new value for hasTankTightnessTest
   * @param electricalConformity The new value for electricalConformity
   * @param tankDetails The new value for tankDetails
   * @param tankCapacity The new value for tankCapacity
   * @param tankConformity The new value for tankConformity
   * @param energyLabelRF The new value for energyLabelRF
   */
  public Energycharacteristic(java.lang.Long pebScore, java.lang.CharSequence energyLabelRW, java.lang.Boolean takeResponsibilityForMissingMandatoryEnergyInformation, java.lang.CharSequence energyUniqueCode, java.lang.Boolean hasSolarPanels, java.lang.Boolean hasDoubleGlazing, java.lang.CharSequence energyLabelRBC, java.lang.Long energySpecificConsumption, java.lang.Long energyTheoreticalConsumption, java.lang.Boolean hasTank, java.lang.Boolean hasCentralHeating, java.lang.CharSequence environmentalPermitType, java.lang.Boolean hasTankTightnessTest, java.lang.CharSequence electricalConformity, java.lang.CharSequence tankDetails, java.lang.Long tankCapacity, java.lang.CharSequence tankConformity, java.lang.CharSequence energyLabelRF) {
    this.pebScore = pebScore;
    this.energyLabelRW = energyLabelRW;
    this.takeResponsibilityForMissingMandatoryEnergyInformation = takeResponsibilityForMissingMandatoryEnergyInformation;
    this.energyUniqueCode = energyUniqueCode;
    this.hasSolarPanels = hasSolarPanels;
    this.hasDoubleGlazing = hasDoubleGlazing;
    this.energyLabelRBC = energyLabelRBC;
    this.energySpecificConsumption = energySpecificConsumption;
    this.energyTheoreticalConsumption = energyTheoreticalConsumption;
    this.hasTank = hasTank;
    this.hasCentralHeating = hasCentralHeating;
    this.environmentalPermitType = environmentalPermitType;
    this.hasTankTightnessTest = hasTankTightnessTest;
    this.electricalConformity = electricalConformity;
    this.tankDetails = tankDetails;
    this.tankCapacity = tankCapacity;
    this.tankConformity = tankConformity;
    this.energyLabelRF = energyLabelRF;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pebScore;
    case 1: return energyLabelRW;
    case 2: return takeResponsibilityForMissingMandatoryEnergyInformation;
    case 3: return energyUniqueCode;
    case 4: return hasSolarPanels;
    case 5: return hasDoubleGlazing;
    case 6: return energyLabelRBC;
    case 7: return energySpecificConsumption;
    case 8: return energyTheoreticalConsumption;
    case 9: return hasTank;
    case 10: return hasCentralHeating;
    case 11: return environmentalPermitType;
    case 12: return hasTankTightnessTest;
    case 13: return electricalConformity;
    case 14: return tankDetails;
    case 15: return tankCapacity;
    case 16: return tankConformity;
    case 17: return energyLabelRF;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pebScore = (java.lang.Long)value$; break;
    case 1: energyLabelRW = (java.lang.CharSequence)value$; break;
    case 2: takeResponsibilityForMissingMandatoryEnergyInformation = (java.lang.Boolean)value$; break;
    case 3: energyUniqueCode = (java.lang.CharSequence)value$; break;
    case 4: hasSolarPanels = (java.lang.Boolean)value$; break;
    case 5: hasDoubleGlazing = (java.lang.Boolean)value$; break;
    case 6: energyLabelRBC = (java.lang.CharSequence)value$; break;
    case 7: energySpecificConsumption = (java.lang.Long)value$; break;
    case 8: energyTheoreticalConsumption = (java.lang.Long)value$; break;
    case 9: hasTank = (java.lang.Boolean)value$; break;
    case 10: hasCentralHeating = (java.lang.Boolean)value$; break;
    case 11: environmentalPermitType = (java.lang.CharSequence)value$; break;
    case 12: hasTankTightnessTest = (java.lang.Boolean)value$; break;
    case 13: electricalConformity = (java.lang.CharSequence)value$; break;
    case 14: tankDetails = (java.lang.CharSequence)value$; break;
    case 15: tankCapacity = (java.lang.Long)value$; break;
    case 16: tankConformity = (java.lang.CharSequence)value$; break;
    case 17: energyLabelRF = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pebScore' field.
   * @return The value of the 'pebScore' field.
   */
  public java.lang.Long getPebScore() {
    return pebScore;
  }

  /**
   * Sets the value of the 'pebScore' field.
   * @param value the value to set.
   */
  public void setPebScore(java.lang.Long value) {
    this.pebScore = value;
  }

  /**
   * Gets the value of the 'energyLabelRW' field.
   * @return The value of the 'energyLabelRW' field.
   */
  public java.lang.CharSequence getEnergyLabelRW() {
    return energyLabelRW;
  }

  /**
   * Sets the value of the 'energyLabelRW' field.
   * @param value the value to set.
   */
  public void setEnergyLabelRW(java.lang.CharSequence value) {
    this.energyLabelRW = value;
  }

  /**
   * Gets the value of the 'takeResponsibilityForMissingMandatoryEnergyInformation' field.
   * @return The value of the 'takeResponsibilityForMissingMandatoryEnergyInformation' field.
   */
  public java.lang.Boolean getTakeResponsibilityForMissingMandatoryEnergyInformation() {
    return takeResponsibilityForMissingMandatoryEnergyInformation;
  }

  /**
   * Sets the value of the 'takeResponsibilityForMissingMandatoryEnergyInformation' field.
   * @param value the value to set.
   */
  public void setTakeResponsibilityForMissingMandatoryEnergyInformation(java.lang.Boolean value) {
    this.takeResponsibilityForMissingMandatoryEnergyInformation = value;
  }

  /**
   * Gets the value of the 'energyUniqueCode' field.
   * @return The value of the 'energyUniqueCode' field.
   */
  public java.lang.CharSequence getEnergyUniqueCode() {
    return energyUniqueCode;
  }

  /**
   * Sets the value of the 'energyUniqueCode' field.
   * @param value the value to set.
   */
  public void setEnergyUniqueCode(java.lang.CharSequence value) {
    this.energyUniqueCode = value;
  }

  /**
   * Gets the value of the 'hasSolarPanels' field.
   * @return The value of the 'hasSolarPanels' field.
   */
  public java.lang.Boolean getHasSolarPanels() {
    return hasSolarPanels;
  }

  /**
   * Sets the value of the 'hasSolarPanels' field.
   * @param value the value to set.
   */
  public void setHasSolarPanels(java.lang.Boolean value) {
    this.hasSolarPanels = value;
  }

  /**
   * Gets the value of the 'hasDoubleGlazing' field.
   * @return The value of the 'hasDoubleGlazing' field.
   */
  public java.lang.Boolean getHasDoubleGlazing() {
    return hasDoubleGlazing;
  }

  /**
   * Sets the value of the 'hasDoubleGlazing' field.
   * @param value the value to set.
   */
  public void setHasDoubleGlazing(java.lang.Boolean value) {
    this.hasDoubleGlazing = value;
  }

  /**
   * Gets the value of the 'energyLabelRBC' field.
   * @return The value of the 'energyLabelRBC' field.
   */
  public java.lang.CharSequence getEnergyLabelRBC() {
    return energyLabelRBC;
  }

  /**
   * Sets the value of the 'energyLabelRBC' field.
   * @param value the value to set.
   */
  public void setEnergyLabelRBC(java.lang.CharSequence value) {
    this.energyLabelRBC = value;
  }

  /**
   * Gets the value of the 'energySpecificConsumption' field.
   * @return The value of the 'energySpecificConsumption' field.
   */
  public java.lang.Long getEnergySpecificConsumption() {
    return energySpecificConsumption;
  }

  /**
   * Sets the value of the 'energySpecificConsumption' field.
   * @param value the value to set.
   */
  public void setEnergySpecificConsumption(java.lang.Long value) {
    this.energySpecificConsumption = value;
  }

  /**
   * Gets the value of the 'energyTheoreticalConsumption' field.
   * @return The value of the 'energyTheoreticalConsumption' field.
   */
  public java.lang.Long getEnergyTheoreticalConsumption() {
    return energyTheoreticalConsumption;
  }

  /**
   * Sets the value of the 'energyTheoreticalConsumption' field.
   * @param value the value to set.
   */
  public void setEnergyTheoreticalConsumption(java.lang.Long value) {
    this.energyTheoreticalConsumption = value;
  }

  /**
   * Gets the value of the 'hasTank' field.
   * @return The value of the 'hasTank' field.
   */
  public java.lang.Boolean getHasTank() {
    return hasTank;
  }

  /**
   * Sets the value of the 'hasTank' field.
   * @param value the value to set.
   */
  public void setHasTank(java.lang.Boolean value) {
    this.hasTank = value;
  }

  /**
   * Gets the value of the 'hasCentralHeating' field.
   * @return The value of the 'hasCentralHeating' field.
   */
  public java.lang.Boolean getHasCentralHeating() {
    return hasCentralHeating;
  }

  /**
   * Sets the value of the 'hasCentralHeating' field.
   * @param value the value to set.
   */
  public void setHasCentralHeating(java.lang.Boolean value) {
    this.hasCentralHeating = value;
  }

  /**
   * Gets the value of the 'environmentalPermitType' field.
   * @return The value of the 'environmentalPermitType' field.
   */
  public java.lang.CharSequence getEnvironmentalPermitType() {
    return environmentalPermitType;
  }

  /**
   * Sets the value of the 'environmentalPermitType' field.
   * @param value the value to set.
   */
  public void setEnvironmentalPermitType(java.lang.CharSequence value) {
    this.environmentalPermitType = value;
  }

  /**
   * Gets the value of the 'hasTankTightnessTest' field.
   * @return The value of the 'hasTankTightnessTest' field.
   */
  public java.lang.Boolean getHasTankTightnessTest() {
    return hasTankTightnessTest;
  }

  /**
   * Sets the value of the 'hasTankTightnessTest' field.
   * @param value the value to set.
   */
  public void setHasTankTightnessTest(java.lang.Boolean value) {
    this.hasTankTightnessTest = value;
  }

  /**
   * Gets the value of the 'electricalConformity' field.
   * @return The value of the 'electricalConformity' field.
   */
  public java.lang.CharSequence getElectricalConformity() {
    return electricalConformity;
  }

  /**
   * Sets the value of the 'electricalConformity' field.
   * @param value the value to set.
   */
  public void setElectricalConformity(java.lang.CharSequence value) {
    this.electricalConformity = value;
  }

  /**
   * Gets the value of the 'tankDetails' field.
   * @return The value of the 'tankDetails' field.
   */
  public java.lang.CharSequence getTankDetails() {
    return tankDetails;
  }

  /**
   * Sets the value of the 'tankDetails' field.
   * @param value the value to set.
   */
  public void setTankDetails(java.lang.CharSequence value) {
    this.tankDetails = value;
  }

  /**
   * Gets the value of the 'tankCapacity' field.
   * @return The value of the 'tankCapacity' field.
   */
  public java.lang.Long getTankCapacity() {
    return tankCapacity;
  }

  /**
   * Sets the value of the 'tankCapacity' field.
   * @param value the value to set.
   */
  public void setTankCapacity(java.lang.Long value) {
    this.tankCapacity = value;
  }

  /**
   * Gets the value of the 'tankConformity' field.
   * @return The value of the 'tankConformity' field.
   */
  public java.lang.CharSequence getTankConformity() {
    return tankConformity;
  }

  /**
   * Sets the value of the 'tankConformity' field.
   * @param value the value to set.
   */
  public void setTankConformity(java.lang.CharSequence value) {
    this.tankConformity = value;
  }

  /**
   * Gets the value of the 'energyLabelRF' field.
   * @return The value of the 'energyLabelRF' field.
   */
  public java.lang.CharSequence getEnergyLabelRF() {
    return energyLabelRF;
  }

  /**
   * Sets the value of the 'energyLabelRF' field.
   * @param value the value to set.
   */
  public void setEnergyLabelRF(java.lang.CharSequence value) {
    this.energyLabelRF = value;
  }

  /**
   * Creates a new Energycharacteristic RecordBuilder.
   * @return A new Energycharacteristic RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Energycharacteristic.Builder newBuilder() {
    return new avro_generated_types.root_view_entity.property.Energycharacteristic.Builder();
  }

  /**
   * Creates a new Energycharacteristic RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Energycharacteristic RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Energycharacteristic.Builder newBuilder(avro_generated_types.root_view_entity.property.Energycharacteristic.Builder other) {
    return new avro_generated_types.root_view_entity.property.Energycharacteristic.Builder(other);
  }

  /**
   * Creates a new Energycharacteristic RecordBuilder by copying an existing Energycharacteristic instance.
   * @param other The existing instance to copy.
   * @return A new Energycharacteristic RecordBuilder
   */
  public static avro_generated_types.root_view_entity.property.Energycharacteristic.Builder newBuilder(avro_generated_types.root_view_entity.property.Energycharacteristic other) {
    return new avro_generated_types.root_view_entity.property.Energycharacteristic.Builder(other);
  }

  /**
   * RecordBuilder for Energycharacteristic instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Energycharacteristic>
    implements org.apache.avro.data.RecordBuilder<Energycharacteristic> {

    private java.lang.Long pebScore;
    private java.lang.CharSequence energyLabelRW;
    private java.lang.Boolean takeResponsibilityForMissingMandatoryEnergyInformation;
    private java.lang.CharSequence energyUniqueCode;
    private java.lang.Boolean hasSolarPanels;
    private java.lang.Boolean hasDoubleGlazing;
    private java.lang.CharSequence energyLabelRBC;
    private java.lang.Long energySpecificConsumption;
    private java.lang.Long energyTheoreticalConsumption;
    private java.lang.Boolean hasTank;
    private java.lang.Boolean hasCentralHeating;
    private java.lang.CharSequence environmentalPermitType;
    private java.lang.Boolean hasTankTightnessTest;
    private java.lang.CharSequence electricalConformity;
    private java.lang.CharSequence tankDetails;
    private java.lang.Long tankCapacity;
    private java.lang.CharSequence tankConformity;
    private java.lang.CharSequence energyLabelRF;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro_generated_types.root_view_entity.property.Energycharacteristic.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pebScore)) {
        this.pebScore = data().deepCopy(fields()[0].schema(), other.pebScore);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.energyLabelRW)) {
        this.energyLabelRW = data().deepCopy(fields()[1].schema(), other.energyLabelRW);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.takeResponsibilityForMissingMandatoryEnergyInformation)) {
        this.takeResponsibilityForMissingMandatoryEnergyInformation = data().deepCopy(fields()[2].schema(), other.takeResponsibilityForMissingMandatoryEnergyInformation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.energyUniqueCode)) {
        this.energyUniqueCode = data().deepCopy(fields()[3].schema(), other.energyUniqueCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hasSolarPanels)) {
        this.hasSolarPanels = data().deepCopy(fields()[4].schema(), other.hasSolarPanels);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hasDoubleGlazing)) {
        this.hasDoubleGlazing = data().deepCopy(fields()[5].schema(), other.hasDoubleGlazing);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.energyLabelRBC)) {
        this.energyLabelRBC = data().deepCopy(fields()[6].schema(), other.energyLabelRBC);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.energySpecificConsumption)) {
        this.energySpecificConsumption = data().deepCopy(fields()[7].schema(), other.energySpecificConsumption);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.energyTheoreticalConsumption)) {
        this.energyTheoreticalConsumption = data().deepCopy(fields()[8].schema(), other.energyTheoreticalConsumption);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.hasTank)) {
        this.hasTank = data().deepCopy(fields()[9].schema(), other.hasTank);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.hasCentralHeating)) {
        this.hasCentralHeating = data().deepCopy(fields()[10].schema(), other.hasCentralHeating);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.environmentalPermitType)) {
        this.environmentalPermitType = data().deepCopy(fields()[11].schema(), other.environmentalPermitType);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.hasTankTightnessTest)) {
        this.hasTankTightnessTest = data().deepCopy(fields()[12].schema(), other.hasTankTightnessTest);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.electricalConformity)) {
        this.electricalConformity = data().deepCopy(fields()[13].schema(), other.electricalConformity);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.tankDetails)) {
        this.tankDetails = data().deepCopy(fields()[14].schema(), other.tankDetails);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tankCapacity)) {
        this.tankCapacity = data().deepCopy(fields()[15].schema(), other.tankCapacity);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.tankConformity)) {
        this.tankConformity = data().deepCopy(fields()[16].schema(), other.tankConformity);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.energyLabelRF)) {
        this.energyLabelRF = data().deepCopy(fields()[17].schema(), other.energyLabelRF);
        fieldSetFlags()[17] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Energycharacteristic instance
     * @param other The existing instance to copy.
     */
    private Builder(avro_generated_types.root_view_entity.property.Energycharacteristic other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.pebScore)) {
        this.pebScore = data().deepCopy(fields()[0].schema(), other.pebScore);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.energyLabelRW)) {
        this.energyLabelRW = data().deepCopy(fields()[1].schema(), other.energyLabelRW);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.takeResponsibilityForMissingMandatoryEnergyInformation)) {
        this.takeResponsibilityForMissingMandatoryEnergyInformation = data().deepCopy(fields()[2].schema(), other.takeResponsibilityForMissingMandatoryEnergyInformation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.energyUniqueCode)) {
        this.energyUniqueCode = data().deepCopy(fields()[3].schema(), other.energyUniqueCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hasSolarPanels)) {
        this.hasSolarPanels = data().deepCopy(fields()[4].schema(), other.hasSolarPanels);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hasDoubleGlazing)) {
        this.hasDoubleGlazing = data().deepCopy(fields()[5].schema(), other.hasDoubleGlazing);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.energyLabelRBC)) {
        this.energyLabelRBC = data().deepCopy(fields()[6].schema(), other.energyLabelRBC);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.energySpecificConsumption)) {
        this.energySpecificConsumption = data().deepCopy(fields()[7].schema(), other.energySpecificConsumption);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.energyTheoreticalConsumption)) {
        this.energyTheoreticalConsumption = data().deepCopy(fields()[8].schema(), other.energyTheoreticalConsumption);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.hasTank)) {
        this.hasTank = data().deepCopy(fields()[9].schema(), other.hasTank);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.hasCentralHeating)) {
        this.hasCentralHeating = data().deepCopy(fields()[10].schema(), other.hasCentralHeating);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.environmentalPermitType)) {
        this.environmentalPermitType = data().deepCopy(fields()[11].schema(), other.environmentalPermitType);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.hasTankTightnessTest)) {
        this.hasTankTightnessTest = data().deepCopy(fields()[12].schema(), other.hasTankTightnessTest);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.electricalConformity)) {
        this.electricalConformity = data().deepCopy(fields()[13].schema(), other.electricalConformity);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.tankDetails)) {
        this.tankDetails = data().deepCopy(fields()[14].schema(), other.tankDetails);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tankCapacity)) {
        this.tankCapacity = data().deepCopy(fields()[15].schema(), other.tankCapacity);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.tankConformity)) {
        this.tankConformity = data().deepCopy(fields()[16].schema(), other.tankConformity);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.energyLabelRF)) {
        this.energyLabelRF = data().deepCopy(fields()[17].schema(), other.energyLabelRF);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'pebScore' field.
      * @return The value.
      */
    public java.lang.Long getPebScore() {
      return pebScore;
    }

    /**
      * Sets the value of the 'pebScore' field.
      * @param value The value of 'pebScore'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setPebScore(java.lang.Long value) {
      validate(fields()[0], value);
      this.pebScore = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'pebScore' field has been set.
      * @return True if the 'pebScore' field has been set, false otherwise.
      */
    public boolean hasPebScore() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'pebScore' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearPebScore() {
      pebScore = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyLabelRW' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnergyLabelRW() {
      return energyLabelRW;
    }

    /**
      * Sets the value of the 'energyLabelRW' field.
      * @param value The value of 'energyLabelRW'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnergyLabelRW(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.energyLabelRW = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'energyLabelRW' field has been set.
      * @return True if the 'energyLabelRW' field has been set, false otherwise.
      */
    public boolean hasEnergyLabelRW() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'energyLabelRW' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnergyLabelRW() {
      energyLabelRW = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'takeResponsibilityForMissingMandatoryEnergyInformation' field.
      * @return The value.
      */
    public java.lang.Boolean getTakeResponsibilityForMissingMandatoryEnergyInformation() {
      return takeResponsibilityForMissingMandatoryEnergyInformation;
    }

    /**
      * Sets the value of the 'takeResponsibilityForMissingMandatoryEnergyInformation' field.
      * @param value The value of 'takeResponsibilityForMissingMandatoryEnergyInformation'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setTakeResponsibilityForMissingMandatoryEnergyInformation(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.takeResponsibilityForMissingMandatoryEnergyInformation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'takeResponsibilityForMissingMandatoryEnergyInformation' field has been set.
      * @return True if the 'takeResponsibilityForMissingMandatoryEnergyInformation' field has been set, false otherwise.
      */
    public boolean hasTakeResponsibilityForMissingMandatoryEnergyInformation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'takeResponsibilityForMissingMandatoryEnergyInformation' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearTakeResponsibilityForMissingMandatoryEnergyInformation() {
      takeResponsibilityForMissingMandatoryEnergyInformation = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyUniqueCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnergyUniqueCode() {
      return energyUniqueCode;
    }

    /**
      * Sets the value of the 'energyUniqueCode' field.
      * @param value The value of 'energyUniqueCode'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnergyUniqueCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.energyUniqueCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'energyUniqueCode' field has been set.
      * @return True if the 'energyUniqueCode' field has been set, false otherwise.
      */
    public boolean hasEnergyUniqueCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'energyUniqueCode' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnergyUniqueCode() {
      energyUniqueCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasSolarPanels' field.
      * @return The value.
      */
    public java.lang.Boolean getHasSolarPanels() {
      return hasSolarPanels;
    }

    /**
      * Sets the value of the 'hasSolarPanels' field.
      * @param value The value of 'hasSolarPanels'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setHasSolarPanels(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.hasSolarPanels = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hasSolarPanels' field has been set.
      * @return True if the 'hasSolarPanels' field has been set, false otherwise.
      */
    public boolean hasHasSolarPanels() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hasSolarPanels' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearHasSolarPanels() {
      hasSolarPanels = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasDoubleGlazing' field.
      * @return The value.
      */
    public java.lang.Boolean getHasDoubleGlazing() {
      return hasDoubleGlazing;
    }

    /**
      * Sets the value of the 'hasDoubleGlazing' field.
      * @param value The value of 'hasDoubleGlazing'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setHasDoubleGlazing(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.hasDoubleGlazing = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hasDoubleGlazing' field has been set.
      * @return True if the 'hasDoubleGlazing' field has been set, false otherwise.
      */
    public boolean hasHasDoubleGlazing() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hasDoubleGlazing' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearHasDoubleGlazing() {
      hasDoubleGlazing = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyLabelRBC' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnergyLabelRBC() {
      return energyLabelRBC;
    }

    /**
      * Sets the value of the 'energyLabelRBC' field.
      * @param value The value of 'energyLabelRBC'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnergyLabelRBC(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.energyLabelRBC = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'energyLabelRBC' field has been set.
      * @return True if the 'energyLabelRBC' field has been set, false otherwise.
      */
    public boolean hasEnergyLabelRBC() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'energyLabelRBC' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnergyLabelRBC() {
      energyLabelRBC = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'energySpecificConsumption' field.
      * @return The value.
      */
    public java.lang.Long getEnergySpecificConsumption() {
      return energySpecificConsumption;
    }

    /**
      * Sets the value of the 'energySpecificConsumption' field.
      * @param value The value of 'energySpecificConsumption'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnergySpecificConsumption(java.lang.Long value) {
      validate(fields()[7], value);
      this.energySpecificConsumption = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'energySpecificConsumption' field has been set.
      * @return True if the 'energySpecificConsumption' field has been set, false otherwise.
      */
    public boolean hasEnergySpecificConsumption() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'energySpecificConsumption' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnergySpecificConsumption() {
      energySpecificConsumption = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyTheoreticalConsumption' field.
      * @return The value.
      */
    public java.lang.Long getEnergyTheoreticalConsumption() {
      return energyTheoreticalConsumption;
    }

    /**
      * Sets the value of the 'energyTheoreticalConsumption' field.
      * @param value The value of 'energyTheoreticalConsumption'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnergyTheoreticalConsumption(java.lang.Long value) {
      validate(fields()[8], value);
      this.energyTheoreticalConsumption = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'energyTheoreticalConsumption' field has been set.
      * @return True if the 'energyTheoreticalConsumption' field has been set, false otherwise.
      */
    public boolean hasEnergyTheoreticalConsumption() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'energyTheoreticalConsumption' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnergyTheoreticalConsumption() {
      energyTheoreticalConsumption = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasTank' field.
      * @return The value.
      */
    public java.lang.Boolean getHasTank() {
      return hasTank;
    }

    /**
      * Sets the value of the 'hasTank' field.
      * @param value The value of 'hasTank'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setHasTank(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.hasTank = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'hasTank' field has been set.
      * @return True if the 'hasTank' field has been set, false otherwise.
      */
    public boolean hasHasTank() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'hasTank' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearHasTank() {
      hasTank = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasCentralHeating' field.
      * @return The value.
      */
    public java.lang.Boolean getHasCentralHeating() {
      return hasCentralHeating;
    }

    /**
      * Sets the value of the 'hasCentralHeating' field.
      * @param value The value of 'hasCentralHeating'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setHasCentralHeating(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.hasCentralHeating = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'hasCentralHeating' field has been set.
      * @return True if the 'hasCentralHeating' field has been set, false otherwise.
      */
    public boolean hasHasCentralHeating() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'hasCentralHeating' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearHasCentralHeating() {
      hasCentralHeating = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'environmentalPermitType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnvironmentalPermitType() {
      return environmentalPermitType;
    }

    /**
      * Sets the value of the 'environmentalPermitType' field.
      * @param value The value of 'environmentalPermitType'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnvironmentalPermitType(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.environmentalPermitType = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'environmentalPermitType' field has been set.
      * @return True if the 'environmentalPermitType' field has been set, false otherwise.
      */
    public boolean hasEnvironmentalPermitType() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'environmentalPermitType' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnvironmentalPermitType() {
      environmentalPermitType = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasTankTightnessTest' field.
      * @return The value.
      */
    public java.lang.Boolean getHasTankTightnessTest() {
      return hasTankTightnessTest;
    }

    /**
      * Sets the value of the 'hasTankTightnessTest' field.
      * @param value The value of 'hasTankTightnessTest'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setHasTankTightnessTest(java.lang.Boolean value) {
      validate(fields()[12], value);
      this.hasTankTightnessTest = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'hasTankTightnessTest' field has been set.
      * @return True if the 'hasTankTightnessTest' field has been set, false otherwise.
      */
    public boolean hasHasTankTightnessTest() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'hasTankTightnessTest' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearHasTankTightnessTest() {
      hasTankTightnessTest = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'electricalConformity' field.
      * @return The value.
      */
    public java.lang.CharSequence getElectricalConformity() {
      return electricalConformity;
    }

    /**
      * Sets the value of the 'electricalConformity' field.
      * @param value The value of 'electricalConformity'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setElectricalConformity(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.electricalConformity = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'electricalConformity' field has been set.
      * @return True if the 'electricalConformity' field has been set, false otherwise.
      */
    public boolean hasElectricalConformity() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'electricalConformity' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearElectricalConformity() {
      electricalConformity = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'tankDetails' field.
      * @return The value.
      */
    public java.lang.CharSequence getTankDetails() {
      return tankDetails;
    }

    /**
      * Sets the value of the 'tankDetails' field.
      * @param value The value of 'tankDetails'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setTankDetails(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.tankDetails = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'tankDetails' field has been set.
      * @return True if the 'tankDetails' field has been set, false otherwise.
      */
    public boolean hasTankDetails() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'tankDetails' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearTankDetails() {
      tankDetails = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'tankCapacity' field.
      * @return The value.
      */
    public java.lang.Long getTankCapacity() {
      return tankCapacity;
    }

    /**
      * Sets the value of the 'tankCapacity' field.
      * @param value The value of 'tankCapacity'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setTankCapacity(java.lang.Long value) {
      validate(fields()[15], value);
      this.tankCapacity = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'tankCapacity' field has been set.
      * @return True if the 'tankCapacity' field has been set, false otherwise.
      */
    public boolean hasTankCapacity() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'tankCapacity' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearTankCapacity() {
      tankCapacity = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'tankConformity' field.
      * @return The value.
      */
    public java.lang.CharSequence getTankConformity() {
      return tankConformity;
    }

    /**
      * Sets the value of the 'tankConformity' field.
      * @param value The value of 'tankConformity'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setTankConformity(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.tankConformity = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'tankConformity' field has been set.
      * @return True if the 'tankConformity' field has been set, false otherwise.
      */
    public boolean hasTankConformity() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'tankConformity' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearTankConformity() {
      tankConformity = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyLabelRF' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnergyLabelRF() {
      return energyLabelRF;
    }

    /**
      * Sets the value of the 'energyLabelRF' field.
      * @param value The value of 'energyLabelRF'.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder setEnergyLabelRF(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.energyLabelRF = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'energyLabelRF' field has been set.
      * @return True if the 'energyLabelRF' field has been set, false otherwise.
      */
    public boolean hasEnergyLabelRF() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'energyLabelRF' field.
      * @return This builder.
      */
    public avro_generated_types.root_view_entity.property.Energycharacteristic.Builder clearEnergyLabelRF() {
      energyLabelRF = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    public Energycharacteristic build() {
      try {
        Energycharacteristic record = new Energycharacteristic();
        record.pebScore = fieldSetFlags()[0] ? this.pebScore : (java.lang.Long) defaultValue(fields()[0]);
        record.energyLabelRW = fieldSetFlags()[1] ? this.energyLabelRW : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.takeResponsibilityForMissingMandatoryEnergyInformation = fieldSetFlags()[2] ? this.takeResponsibilityForMissingMandatoryEnergyInformation : (java.lang.Boolean) defaultValue(fields()[2]);
        record.energyUniqueCode = fieldSetFlags()[3] ? this.energyUniqueCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.hasSolarPanels = fieldSetFlags()[4] ? this.hasSolarPanels : (java.lang.Boolean) defaultValue(fields()[4]);
        record.hasDoubleGlazing = fieldSetFlags()[5] ? this.hasDoubleGlazing : (java.lang.Boolean) defaultValue(fields()[5]);
        record.energyLabelRBC = fieldSetFlags()[6] ? this.energyLabelRBC : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.energySpecificConsumption = fieldSetFlags()[7] ? this.energySpecificConsumption : (java.lang.Long) defaultValue(fields()[7]);
        record.energyTheoreticalConsumption = fieldSetFlags()[8] ? this.energyTheoreticalConsumption : (java.lang.Long) defaultValue(fields()[8]);
        record.hasTank = fieldSetFlags()[9] ? this.hasTank : (java.lang.Boolean) defaultValue(fields()[9]);
        record.hasCentralHeating = fieldSetFlags()[10] ? this.hasCentralHeating : (java.lang.Boolean) defaultValue(fields()[10]);
        record.environmentalPermitType = fieldSetFlags()[11] ? this.environmentalPermitType : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.hasTankTightnessTest = fieldSetFlags()[12] ? this.hasTankTightnessTest : (java.lang.Boolean) defaultValue(fields()[12]);
        record.electricalConformity = fieldSetFlags()[13] ? this.electricalConformity : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.tankDetails = fieldSetFlags()[14] ? this.tankDetails : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.tankCapacity = fieldSetFlags()[15] ? this.tankCapacity : (java.lang.Long) defaultValue(fields()[15]);
        record.tankConformity = fieldSetFlags()[16] ? this.tankConformity : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.energyLabelRF = fieldSetFlags()[17] ? this.energyLabelRF : (java.lang.CharSequence) defaultValue(fields()[17]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
